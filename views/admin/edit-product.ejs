<!DOCTYPE html>
<html>
<%- include("../partials/admin/header") %>




<head>
    <style>
        .content-main {
            padding: 2rem;
            background-color: #f8f9fa;
        }

        .card {
            border: none;
            box-shadow: 0 0 15px rgba(0,0,0,0.05);
            background: white;
            border-radius: 10px;
        }

        .card-header {
            background-color: white;
            border-bottom: 1px solid #eee;
            padding: 1.5rem;
        }

        .form-label {
            font-weight: 600;
            color: #2c3345;
            margin-bottom: 0.5rem;
        }

        .form-control, .form-select {
            border: 1px solid #e2e8f0;
            padding: 0.75rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: #4f46e5;
            box-shadow: 0 0 0 2px rgba(79, 70, 229, 0.1);
        }

        .error-message {
            color: #dc2626;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }

        .image-preview {
            border: 2px dashed #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            text-align: center;
        }

        .image-preview img {
            max-width: 150px;
            height: auto;
            margin: 0.5rem;
        }

        .btn-primary {
            background-color: #4f46e5;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background-color: #4338ca;
            transform: translateY(-1px);
        }

        .existing-images {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }

        .existing-image-container {
            position: relative;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 0.5rem;
        }

        .delete-image-btn {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ef4444;
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
        }

        .section-title {
            color: #1f2937;
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 2rem;
        }
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>

<section class="content-main">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <h2 class="section-title">Edit Product</h2>
                <div class="card">
                    <div class="card-body">
                        <form method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data" onsubmit="return validateForm()">
                            <div class="row">
                                <div class="col-md-6 mb-4">
                                    <label for="product_name" class="form-label">Product Name</label>
                                    <input type="text" name="productName" value="<%= product.productName %>" class="form-control" id="product_name">
                                    <div id="productName-error" class="error-message"></div>
                                </div>

                                <div class="col-md-6 mb-4">
                                    <label class="form-label">Brand</label>
                                    <select class="form-select" name="brand">
                                        <% if (brand && brand.length > 0) { %>
                                            <% for (let i = 0; i < brand.length; i++) { %>
                                                <option value="<%= brand[i].brandName %>"><%= brand[i].brandName %></option>
                                            <% } %>
                                        <% } else { %>
                                            <option value="">No brands available</option>
                                        <% } %>
                                    </select>
                                    <div id="brand-error" class="error-message"></div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-4">
                                    <label class="form-label">Size</label>
                                    <select class="form-select" name="size[]" multiple>
                                        <% if (size && size.length > 0) { %>
                                            <% for (let i = 0; i < size.length; i++) { %>
                                                <option value="<%= size[i] %>" <%= product.size.includes(size[i]) ? 'selected' : '' %>><%= size[i] %></option>
                                            <% } %>
                                        <% } else { %>
                                            <option value="NSZ">No Sizes Available</option>
                                        <% } %>
                                    </select>
                                    <div id="size-error" class="error-message"></div>
                                </div>
                                

                                <div class="col-md-6 mb-4">
                                    <label class="form-label">Category</label>
                                    <select class="form-select" name="category">
                                        <% if (cat && cat.length > 0) { %>
                                            <% for(let i=0; i < cat.length; i++) { %>
                                                <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                            <% } %>
                                        <% } else { %>
                                            <option value="">No categories available</option>
                                        <% } %>
                                    </select>
                                    <div id="category-error" class="error-message"></div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Description</label>
                                <textarea name="descriptionData" class="form-control" rows="4"><%= product.description %></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="row">
                                <div class="col-md-4 mb-4">
                                    <label class="form-label">Regular Price</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input name="regularPrice" type="text" value="<%= product.regularPrice %>" class="form-control">
                                    </div>
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>

                                <div class="col-md-4 mb-4">
                                    <label class="form-label">Sale Price</label>
                                    <div class="input-group">
                                        <span class="input-group-text">$</span>
                                        <input name="salePrice" type="text" value="<%= product.salePrice %>" class="form-control">
                                    </div>
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>

                                <div class="col-md-4 mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input name="quantity" type="number" value="<%= product.quantity %>" class="form-control">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Color</label>
                                <input name="color" type="text" value="<%= product.color %>" class="form-control">
                                <div id="color-error" class="error-message"></div>
                            </div>

                            <div class="card mb-4">
                                <div class="card-header">
                                    <h4 class="mb-0">Product Images</h4>
                                </div>
                                <div class="card-body">
                                    <!-- Existing Images -->
                                    <div class="existing-images">
                                        <% for(let i=0; i < product.productImage.length; i++) { %>
                                            <div class="existing-image-container">
                                                <input type="hidden" name="images" value="<%= product.productImage[i] %>" id="imageDatas">
                                                <img class="rounded" style="width: 100px; height: 120px; object-fit: cover;" 
                                                     src="/uploads/product-images/<%= product.productImage[i] %>" alt="">
                                                <button type="button" class="delete-image-btn" 
                                                        onclick="deleteSingleImage('<%= product.productImage[i] %>', '<%= product._id %>')">
                                                    ×
                                                </button>
                                            </div>
                                        <% } %>
                                    </div>

                                    <!-- New Image Uploads -->
                                    <div class="row">
                                        <% for(let i = 1; i <= 4; i++) { %>
                                            <div class="col-md-6 mb-4">
                                                <div class="image-preview">
                                                    <img src="" alt="" id="imgView<%= i %>">
                                                    <input class="form-control mt-3" type="file" name="images" 
                                                           id="input<%= i %>" accept="image/png, image/jpeg, image/jpg">
                                                </div>
                                                <div class="image-cropper d-none">
                                                    <img src="" id="croppedImg<%= i %>" alt="" class="mb-2">
                                                    <button type="button" id="saveButton<%= i %>" 
                                                            class="btn btn-primary btn-sm">Save Crop</button>
                                                </div>
                                            </div>
                                        <% } %>
                                    </div>
                                    <div id="images-error" class="error-message"></div>
                                </div>
                            </div>

                            <div class="text-end mt-4">
                                <button class="btn btn-primary" id="updatebtn" type="button" onclick="validateAndSubmit()">
                                    Update Product
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

    <script>


function validateAndSubmit() {
    if (validateForm()) {
        document.forms[0].submit(); 
    }
}

function validateForm() {
    clearErrorMessages();

  
    const name = document.getElementsByName('productName')[0].value;
    const description = document.getElementsByName('descriptionData')[0].value;
    const brand = document.getElementsByName('brand')[0].value;
    const price = document.getElementsByName('regularPrice')[0].value;
    const salePrice = document.getElementsByName('salePrice')[0].value;
    const color = document.getElementsByName('color')[0].value;
    const category = document.getElementsByName('category')[0].value;
    const quantity = document.getElementsByName('quantity')[0].value;
    const images = document.getElementById('input1').files.length;
    const existingImage = document.getElementById("imageDatas")?.value;

    let isValid = true;

  
    if (!/^[A-Za-z\s.,'&@-]+$/.test(name)) {  
        displayErrorMessage('productName-error', 'Please enter a valid product name (alphabets only).');
        isValid = false;
    }

    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

    if (quantity === "" || isNaN(quantity) || parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
        isValid = false;
    }

    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative regular price.');
        isValid = false;
    }

    if (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative sale price.');
        isValid = false;
    }

    if (parseFloat(price) < parseFloat(salePrice)) {
        displayErrorMessage('salePrice-error', 'Sale price cannot be greater than regular price.');
        isValid = false;
    }

    if (color.trim() === "") {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }

   
    if (!existingImage && images === 0) {
        displayErrorMessage('images-error', 'Please select at least one image.');
        isValid = false;
    }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
        element.style.display = "none"; 
    });
}

        
        
       // Store croppers in an object to manage multiple instances
const croppers = {};

function initializeCropper(index) {
    // Destroy existing cropper if any
    if (croppers[index]) {
        croppers[index].destroy();
        croppers[index] = null;
    }

    const imageElement = document.getElementById(`imgView${index}`);
    const cropperContainer = document.querySelector(`#croppedImg${index}`).closest('.image-cropper');
    
    // Initialize Cropper
    croppers[index] = new Cropper(imageElement, {
        aspectRatio: 1,
        viewMode: 1,
        guides: true,
        background: false,
        autoCropArea: 0.8,
        zoomable: true,
        ready() {
            // Show cropper container when ready
            cropperContainer.classList.remove('d-none');
            cropperContainer.classList.add('d-flex');
        }
    });
}

function viewImage(event, index) {
    const input = event.target;
    const file = input.files[0];
    
    if (!file) return;

    // Clear previous preview
    const imageElement = document.getElementById(`imgView${index}`);
    const cropperContainer = document.querySelector(`#croppedImg${index}`).closest('.image-cropper');
    
    // Reset containers
    cropperContainer.classList.add('d-none');
    cropperContainer.classList.remove('d-flex');
    
    // Create and handle FileReader
    const reader = new FileReader();
    reader.onload = function() {
        imageElement.src = reader.result;
        initializeCropper(index);
        
        // Handle save button click
        const saveButton = document.getElementById(`saveButton${index}`);
        saveButton.onclick = async function() {
            if (!croppers[index]) return;
            
            try {
                // Get cropped canvas and convert to blob
                const croppedCanvas = croppers[index].getCroppedCanvas({
                    width: 600,  // Set desired output size
                    height: 600,
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high'
                });

                // Update preview
                const croppedImage = document.getElementById(`croppedImg${index}`);
                croppedImage.src = croppedCanvas.toDataURL('image/jpeg', 0.9);

                // Convert to file and update input
                const blob = await new Promise(resolve => croppedCanvas.toBlob(resolve, 'image/jpeg', 0.9));
                const fileName = `cropped-${Date.now()}-${index}.jpg`;
                const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });

                // Update file input
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedFile);
                input.files = dataTransfer.files;

                // Cleanup
                croppers[index].destroy();
                croppers[index] = null;
                cropperContainer.classList.add('d-none');
                cropperContainer.classList.remove('d-flex');
                
                // Update main preview
                imageElement.src = URL.createObjectURL(croppedFile);
            } catch (error) {
                console.error('Error during image cropping:', error);
                alert('There was an error processing the image. Please try again.');
            }
        };
    };

    reader.readAsDataURL(file);
}


document.addEventListener('DOMContentLoaded', function() {
    // Remove the individual viewImage1, viewImage2, etc. functions
    const fileInputs = document.querySelectorAll('input[type="file"][name="images"]');
    fileInputs.forEach((input, idx) => {
        input.removeEventListener('change', window[`viewImage${idx + 1}`]);
        input.addEventListener('change', (e) => viewImage(e, idx + 1));
    });
});

        //        const selectedImages = [];
        //    document.getElementById("imageInput").addEventListener("change", handleFileSelect);
        
        //        function handleFileSelect(event) {
        //            const addedImagesContainer = document.getElementById("addedImagesContainer");
        //            addedImagesContainer.innerHTML = "";
        //            const files = event.target.files;
        //            for (let i = 0; i < files.length; i++) {
        //                const file = files[i];
        //                selectedImages.push(file);
        //                const thumbnail = document.createElement("div");
        //                thumbnail.classList.add("thumbnail");
        //                const img = document.createElement("img");
        //                img.src = URL.createObjectURL(file);
        //                img.alt = "thumbnail";
        //                img.style.width = "50px";
        //                img.style.height = "auto";
        //                const removeIcon = document.createElement("span");
        //                removeIcon.classList.add("remove-icon");
        //                removeIcon.innerHTML = "&times;";
        //                removeIcon.addEventListener("click", function () {
        //                    const index = selectedImages.indexOf(file);
        //                    if (index !== -1) {
        //                        selectedImages.splice(index, 1);
        //                    }
        //                    thumbnail.remove();
        //                });
        //                thumbnail.appendChild(img);
        //                thumbnail.appendChild(removeIcon);
        //                addedImagesContainer.appendChild(thumbnail);
        //            }
        //        };


               function deleteSingleImage(imageId,productId){
                $.ajax({
                    url:"/admin/deleteImage",
                    method:"post",
                    data:{imageNameToServer:imageId,productIdToServer:productId},
                    success:((response)=>{
                        if(response.status === true){
                            window.location.reload()
                        }
                    })
                })
               }
               
           </script>
        
        
    <%- include("../partials/admin/footer") %>