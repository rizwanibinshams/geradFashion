
<%- include("../partials/admin/header") %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-4xl font-bold mb-8 text-center text-indigo-600 opacity-0" id="pageTitle">Add New Product</h1>
        <div class="bg-white shadow-lg rounded-lg p-8">
            <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()" class="space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-2">
                        <label for="product_name" class="block text-sm font-medium text-gray-700">Product Name</label>
                        <input type="text" id="product_name" name="productName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        <div id="productName-error" class="text-red-500 text-xs"></div>
                    </div>
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Brand</label>
                        <select class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" name="brand">
                            <% for(let i=0;i<brand.length;i++) { %>
                                <option value="<%= brand[i].brandName %>"><%= brand[i].brandName %></option>
                            <% } %>
                        </select>
                        <div id="brand-error" class="text-red-500 text-xs"></div>
                    </div>
                </div>

                <div class="space-y-2">
                    <label class="block text-sm font-medium text-gray-700">Full description</label>
                    <textarea id="descriptionid" name="description" rows="4" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"></textarea>
                    <div id="description-error" class="text-red-500 text-xs"></div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Regular price</label>
                        <input name="regularPrice" type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="$">
                        <div id="regularPrice-error" class="text-red-500 text-xs"></div>
                    </div>
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Sale price</label>
                        <input name="salePrice" type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" placeholder="$">
                        <div id="salePrice-error" class="text-red-500 text-xs"></div>
                    </div>
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Quantity</label>
                        <input name="quantity" type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        <div id="quantity-error" class="text-red-500 text-xs"></div>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Color</label>
                        <input name="color" type="text" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        <div id="color-error" class="text-red-500 text-xs"></div>
                    </div>
                    <div class="space-y-2">
                        <label class="block text-sm font-medium text-gray-700">Category</label>
                        <select class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" name="category">
                            <% cat.forEach((category, index) => { %>
                                <option value="<%= category.name %>"><%= category.name %></option>
                            <% }); %>
                        </select>
                        <div id="category-error" class="text-red-500 text-xs"></div>
                    </div>

                    <div class="space-y-2">
                        <label for="size" class="block text-sm font-medium text-gray-700">Size</label>
                        <select id="size" name="size" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" >
                            <option value="S">S</option>
                            <option value="M">M</option>
                            <option value="L">L</option>
                        </select>
                    </div>
                </div>

                <div class="space-y-4">
                    <h4 class="text-lg font-semibold text-gray-700">Choose images</h4>
                    <div id="addedImagesContainer" class="flex overflow-x-auto space-x-4 p-4 bg-gray-50 rounded-md"></div>
                    <div class="space-y-4">
                        <% for(let i = 1; i <= 4; i++) { %>
                            <div class="space-y-2">
                                <label class="block text-sm font-medium text-gray-700">Image <%= i %></label>
                                <input class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100" type="file" name="images" id="input<%= i %>" accept="image/png, image/jpeg, image/jpg" onchange="viewImage<%= i %>(event), viewImage(event, <%= i %>)">
                                <img src="" alt="" id="imgView<%= i %>" class="mt-2 max-w-xs">
                                <div class="image-cropper hidden mt-4">
                                    <img src="" id="croppedImg<%= i %>" alt="" class="max-w-xs mb-2">
                                    <button type="button" id="saveButton<%= i %>" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Save</button>
                                </div>
                            </div>
                        <% } %>
                    </div>
                    <div id="images-error" class="text-red-500 text-xs"></div>
                </div>

                <div class="mt-6">
                    <button type="button" onclick="validateAndSubmit()" class="w-full px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 ease-in-out transform hover:scale-105">
                        Publish
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
    // Existing JavaScript functions
    function validateAndSubmit() {
        if (validateForm()) {
            document.forms[0].submit();
        }
    }

    function viewImage1(event) {
        document.getElementById("imgView1").src = URL.createObjectURL(event.target.files[0])
    }
    function viewImage2(event) {
        document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0])
    }
    function viewImage3(event) {
        document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0])
    }
    function viewImage4(event) {
        document.getElementById("imgView4").src = URL.createObjectURL(event.target.files[0])
    }

    function viewImage(event, index) {
        let input = event.target;
        let reader = new FileReader();

        reader.onload = function () {
            let dataURL = reader.result;
            let image = document.getElementById("imgView" + index);
            image.src = dataURL;

            // Initialize cropper
            let cropper = new Cropper(image, {
                aspectRatio: 1,
                viewMode: 1,
                guides: true,
                background: false,
                autoCropArea: 1,
                zoomable: true
            });

            // Show the cropper container
            let cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
            cropperContainer.classList.remove('hidden');

            let saveButton = document.querySelector("#saveButton" + index);

            // Remove any existing event listeners to avoid duplication
            saveButton.replaceWith(saveButton.cloneNode(true));
            saveButton = document.querySelector("#saveButton" + index);

            saveButton.addEventListener("click", function () {
                let croppedCanvas = cropper.getCroppedCanvas();
                let croppedImage = document.getElementById("croppedImg" + index);
                croppedImage.src = croppedCanvas.toDataURL("image/jpeg", 1.0);

                let timestamp = new Date().getTime();
                let fileName = `cropped-img-${timestamp}-${index}.png`;

                croppedCanvas.toBlob(async (blob) => {
                    let inputFile = document.getElementById("input" + index);
                    
                    let imgFile = new File([blob], fileName, { type: 'image/jpeg' });
                    const fileList = new DataTransfer();
                    fileList.items.add(imgFile);
                    inputFile.files = fileList.files;

                    cropperContainer.classList.add('hidden');

                    cropper.destroy();
                }, "image/jpeg", 1.0);
            });
        };

        reader.readAsDataURL(input.files[0]);
    }

    const selectedImages = [];
    document.getElementById("input1").addEventListener("change", handleFileSelect);

    function handleFileSelect(event) {
        const addedImagesContainer = document.getElementById("addedImagesContainer")
        addedImagesContainer.innerHTML = "";
        const files = event.target.files;
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            selectedImages.push(file);
            const thumbnail = document.createElement("div");
            thumbnail.classList.add("thumbnail", "relative");

            const img = document.createElement("img")
            img.src = URL.createObjectURL(file);
            img.alt = "thumbnail";
            img.classList.add("w-20", "h-20", "object-cover", "rounded-md");
            const removeIcon = document.createElement("button");
            removeIcon.classList.add("absolute", "-top-2", "-right-2", "bg-red-500", "text-white", "rounded-full", "w-6", "h-6", "flex", "items-center", "justify-center", "text-xs", "font-bold");
            removeIcon.innerHTML = "×";
            removeIcon.addEventListener("click", function () {
                const index = selectedImages.indexOf(file);
                if (index !== -1) {
                    selectedImages.splice(index, 1)
                }
                thumbnail.remove();
            });
            thumbnail.appendChild(img);
            thumbnail.appendChild(removeIcon);
            addedImagesContainer.appendChild(thumbnail);
        }
    }

    function validateForm() {
        clearErrorMessages();
        const name = document.getElementsByName('productName')[0].value;
        const description = document.getElementById('descriptionid').value;
        const brand = document.getElementsByName('brand')[0].value;
        const price = document.getElementsByName('regularPrice')[0].value;
        const saleprice = document.getElementsByName('salePrice')[0].value;
        const color = document.getElementsByName('color')[0].value;
        const category = document.getElementsByName('category')[0].value;
        const images = document.getElementById('input1')
        const quantity = document.getElementsByName('quantity')[0].value;
        let isValid = true;
        if (name.trim() === "") {
            displayErrorMessage('productName-error', 'Please enter a product name.');
            isValid = false;
        } else if (!/^[A-Za-z\s.,'&@-]+$/.test(name.trim())) {
            displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
            isValid = false;
        }
        
        if (description.trim() === "") {
            displayErrorMessage('description-error', 'Please enter a product description.');
            isValid = false;
        } else if (!/^[A-Za-z\s.,'&@-]+$/.test(description.trim())) {
            displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
            isValid = false;
        }
    
        if (parseInt(quantity) < 0) {
            displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
            isValid = false;
        }

        if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
            displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
            isValid = false;
        }

        if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
            displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
            isValid = false;
        }
        if (parseFloat(price) <= parseFloat(saleprice)) {
            displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
            isValid = false;
        }

        if (color.trim() === "") {
            displayErrorMessage('color-error', 'Please enter a color.');
            isValid = false;
        }

        if (images.files.length === 0) {
            displayErrorMessage("images-error", 'Please select an image.');
            isValid = false;
        }
        return isValid;
    }

    function displayErrorMessage(elementId, message) {
        var errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }

    function clearErrorMessages() {
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
            element.innerText = '';
        });
    }

    // New JavaScript for animations and enhanced UI
    document.addEventListener('DOMContentLoaded', function() {
        // Animate the page title
        gsap.to("#pageTitle", {duration: 1, opacity: 1, y: 20, ease: "power3.out"});

        // Animate form fields on scroll
        const formFields = document.querySelectorAll('form > div');
        formFields.forEach((field, index) => {
            gsap.from(field, {
                scrollTrigger: {
                    trigger: field,
                    start: "top bottom-=100",
                    toggleActions: "play none none reverse"
                },
                opacity: 0,
                y: 50,
                duration: 0.5,
                delay: index * 0.1
            });
        });

        // Add hover effect to input fields
        const inputFields = document.querySelectorAll('input, select, textarea');
        inputFields.forEach(field => {
            field.addEventListener('focus', () => {
                gsap.to(field, {scale: 1.02, duration: 0.2, ease: "power1.out"});
            });
            field.addEventListener('blur', () => {
                gsap.to(field, {scale: 1, duration: 0.2, ease: "power1.in"});
            });
        });

        // Animate the publish button on hover
        const publishButton = document.querySelector('button[onclick="validateAndSubmit()"]');
        publishButton.addEventListener('mouseenter', () => {
            gsap.to(publishButton, {scale: 1.05, duration: 0.2, ease: "power1.out"});
        });
        publishButton.addEventListener('mouseleave', () => {
            gsap.to(publishButton, {scale: 1, duration: 0.2, ease: "power1.in"});
        });

        // Add a subtle background animation
        gsap.to('body', {
            backgroundPosition: '100% 100%',
            duration: 20,
            repeat: -1,
            yoyo: true,
            ease: "sine.inOut"
        });
    });
    </script>
</body>
</html>

<%- include("../partials/admin/footer") %>