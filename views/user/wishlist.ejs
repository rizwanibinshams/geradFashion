<%- include("../partials/user/header") %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fashion Wishlist</title>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #FAFAFA;
            margin: 0;
            padding: 0;
        }

        h1, h2, h3 {
            font-family: 'Playfair Display', serif;
        }

        .container {
            max-width: 1280px;
            margin: 0 auto;
            padding: 1rem;
        }

        .breadcrumb {
            padding: 1rem 0;
            margin-bottom: 2rem;
        }

        .breadcrumb ol {
            list-style: none;
            padding: 0;
            margin: 0;
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .breadcrumb a {
            color: #666;
            text-decoration: none;
            text-transform: uppercase;
            font-size: 0.875rem;
            transition: color 0.2s;
        }

        .breadcrumb a:hover {
            color: #000;
        }

        .page-title {
            text-align: center;
            margin-bottom: 3rem;
        }

        .page-title h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            color: #1a1a1a;
        }

        .page-title p {
            color: #666;
            margin: 0;
        }

        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 2rem;
            margin: 2rem 0;
        }

        .product-card {
            background: white;
            border-radius: 1rem;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: transform 0.3s, box-shadow 0.3s;
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .product-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }

        .product-image {
            position: relative;
            padding-top: 100%;
            overflow: hidden;
        }

        .product-image img {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s;
        }

        .product-card:hover .product-image img {
            transform: scale(1.05);
        }

        .discount-badge {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: #1a1a1a;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 2rem;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .product-info {
            padding: 1.5rem;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        .product-brand {
            color: #666;
            text-transform: uppercase;
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
        }

        .product-name {
            font-size: 1.125rem;
            font-weight: 600;
            color: #1a1a1a;
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            height: 2.75rem;
        }

        .product-description {
            color: #666;
            font-size: 0.875rem;
            margin-bottom: 1.5rem;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            height: 3.9rem;
        }

        .price-rating {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .price {
            font-family: 'Playfair Display', serif;
        }

        .current-price {
            font-size: 1.5rem;
            font-weight: 600;
            color: #1a1a1a;
        }

        .original-price {
            color: #999;
            text-decoration: line-through;
            margin-left: 0.5rem;
            font-size: 1rem;
        }

        .rating {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .star {
            color: #fbbf24;
            width: 1rem;
            height: 1rem;
        }

        .review-count {
            color: #666;
            font-size: 0.875rem;
            margin-left: 0.5rem;
        }

        .controls {
            margin-top: auto;
        }

        .size-selector {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            margin-bottom: 1rem;
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%23666666'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'%3E%3C/path%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 0.75rem center;
            background-size: 1rem;
        }

        .quantity-controls {
            display: flex;
            align-items: center;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            overflow: hidden;
            margin-bottom: 1rem;
        }

        .quantity-btn {
            padding: 0.75rem;
            background: none;
            border: none;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .quantity-btn:hover {
            background-color: #f3f4f6;
        }

        .quantity-input {
            width: 3rem;
            text-align: center;
            border: none;
            -moz-appearance: textfield;
            font-size: 1rem;
        }

        .quantity-input::-webkit-outer-spin-button,
        .quantity-input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        .actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
        }

        .add-to-cart {
            flex-grow: 1;
            background: #1a1a1a;
            color: white;
            border: none;
            padding: 0.875rem 1.5rem;
            border-radius: 2rem;
            font-weight: 500;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            transition: background-color 0.2s;
        }

        .add-to-cart:hover {
            background: #333;
        }

        .remove-item {
            background: none;
            border: none;
            padding: 0.5rem;
            color: #666;
            cursor: pointer;
            transition: color 0.2s;
        }

        .remove-item:hover {
            color: #dc2626;
        }

        .empty-wishlist {
            text-align: center;
            padding: 4rem 1rem;
        }

        .empty-wishlist svg {
            width: 6rem;
            height: 6rem;
            color: #d1d5db;
            margin-bottom: 1.5rem;
        }

        .empty-wishlist h2 {
            font-size: 1.5rem;
            color: #1a1a1a;
            margin-bottom: 0.5rem;
        }

        .empty-wishlist p {
            color: #666;
            max-width: 24rem;
            margin: 0 auto;
        }

        @media (max-width: 768px) {
            .products-grid {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
                gap: 1rem;
            }

            .page-title h1 {
                font-size: 2rem;
            }

            .product-info {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
   
    
    <div class="container">
        <nav class="breadcrumb" aria-label="breadcrumb">
            <ol>
                <li><a href="/">Home</a></li>
                <li><span class="mx-2">/</span></li>
                <li><a href="/wishlist">Wishlist</a></li>
            </ol>
        </nav>

        <div class="page-title">
            <h1>Your Wishlist</h1>
            <p>Your personally selected fashion pieces</p>
        </div>

        <div class="products-grid">
            <% if (wishlistItems && wishlistItems.length > 0) { %>
                <% wishlistItems.forEach(function(item) { %>
                    <div class="product-card" data-item-id="<%= item._id %>">
                        <div class="product-image">
                            <a href="/productDetails?id=<%= item._id %>">
                                <img src="<%= item.product.productImage %>" alt="<%= item.product.productName %>">
                            </a>
                            <% if (item.product.discount > 0) { %>
                                <div class="discount-badge">
                                    <%= item.product.discount %>% OFF
                                </div>
                            <% } %>
                        </div>
                        
                        <div class="product-info">
                            <div class="product-brand"><%= item.product.brand %></div>
                            <h3 class="product-name"><%= item.product.productName %></h3>
                            
                            <div class="price-rating">
                                <div class="price">
                                    <span class="current-price">â‚¹<%= item.product.salePrice.toFixed(2) %></span>
                                    <% if (item.product.discount > 0) { %>
                                        <span class="original-price">â‚¹<%= item.product.price.toFixed(2) %></span>
                                    <% } %>
                                </div>
                                <div class="rating">
                                    <% for (let i = 0; i < 5; i++) { %>
                                        <svg class="star" viewBox="0 0 20 20" fill="<%= i < (item.product.rating || 0) ? 'currentColor' : '#e5e7eb' %>">
                                            <path d="M10 15l-5.878 3.09 1.123-6.545L.489 6.91l6.572-.955L10 0l2.939 5.955 6.572.955-4.756 4.635 1.123 6.545z"/>
                                        </svg>
                                    <% } %>
                                    <span class="review-count"><%= item.product.reviewCount || 0 %></span>
                                </div>
                            </div>

                            <p class="product-description"><%= item.product.description %></p>

                            <div class="controls">
                                <select class="size-selector" name="size" required>
                                    <option value="">Select Size</option>
                                    <% if (item.product.sizes && item.product.sizes.length > 0) { %>
                                        <% item.product.sizes.forEach(function(size) { %>
                                            <option value="<%= size %>"><%= size %></option>
                                        <% }); %>
                                    <% } %>
                                </select>

                                <div class="quantity-controls">
                                    <button type="button" class="quantity-btn decrease-quantity">âˆ’</button>
                                    <input type="number" class="quantity-input" value="1" min="1" max="<%= item.product.quantity %>">
                                    <button type="button" class="quantity-btn increase-quantity">+</button>
                                </div>

                                <div class="actions">
                                    <button class="add-to-cart">
                                        <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"/>
                                        </svg>
                                        Add to Cart
                                    </button>
                                    <button class="remove-item">
                                        <svg width="24" height="24" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <div class="col-span-full py-16 flex flex-col items-center justify-center">
                    <svg class="w-24 h-24 text-gray-300 mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                    </svg>
                    <h2 class="font-[Playfair Display] text-2xl font-bold text-gray-900 mb-2">
                        Your Wishlist is Empty
                    </h2>
                    <p class="text-gray-600 text-center max-w-md">
                        Discover our latest collections and add your favorite pieces to create your perfect wardrobe.
                    </p>
                </div>
            <% } %>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Quantity Control Handler
            function setupQuantityControls() {
    document.querySelectorAll('.quantity-controls').forEach(control => {
        const input = control.querySelector('.quantity-input');
        const decreaseBtn = control.querySelector('.decrease-quantity');
        const increaseBtn = control.querySelector('.increase-quantity');

        function updateQuantity(newValue) {
            // Set maximum value to 10
            const maxValue = 10;
            // Ensure value is between 1 and 10
            newValue = Math.max(1, Math.min(maxValue, newValue));
            input.value = newValue;
        }

        decreaseBtn.addEventListener('click', () => {
            updateQuantity(parseInt(input.value) - 1);
        });

        increaseBtn.addEventListener('click', () => {
            updateQuantity(parseInt(input.value) + 1);
        });

        input.addEventListener('change', () => {
            updateQuantity(parseInt(input.value));
        });

        // Prevent manual input of invalid values
        input.addEventListener('keypress', (e) => {
            if (!/[0-9]/.test(e.key)) {
                e.preventDefault();
            }
        });

        // Additional input validation
        input.addEventListener('input', function() {
            this.value = this.value.replace(/[^0-9]/g, '');
            if (parseInt(this.value) > 10) {
                this.value = 10;
            }
            if (this.value === '' || parseInt(this.value) < 1) {
                this.value = 1;
            }
        });
    });
}

            // Add to Cart Handler
            function setupAddToCart() {
                document.querySelectorAll('.add-to-cart').forEach(button => {
                    button.addEventListener('click', async function(e) {
                        e.preventDefault();
                        const productCard = this.closest('.product-card');
                        const productId = productCard.dataset.itemId;
                        const sizeSelect = productCard.querySelector('.size-selector');
                        const quantityInput = productCard.querySelector('.quantity-input');

                        const size = sizeSelect.value;
                        const quantity = parseInt(quantityInput.value);

                        if (!size) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Please Select a Size',
                                text: 'You must select a size before adding to cart',
                                confirmButtonColor: '#1a1a1a',
                                confirmButtonText: 'Okay'
                            });
                            return;
                        }

                        try {
                            const response = await fetch('/addToCart', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    productId,
                                    size,
                                    quantity
                                })
                            });

                            const data = await response.json();

                            if (response.ok) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Added to Cart',
                                    text: 'Product has been added to your cart successfully',
                                    showConfirmButton: false,
                                    timer: 1500,
                                    backdrop: 'rgba(0,0,0,0.1)',
                                    customClass: {
                                        popup: 'animated fadeInDown'
                                    }
                                });
                            } else {
                                if (data.redirect) {
                                    window.location.href = data.redirect;
                                    return;
                                }
                                throw new Error(data.message);
                            }
                        } catch (error) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: error.message || 'Unable to add item to cart',
                                confirmButtonColor: '#1a1a1a'
                            });
                        }
                    });
                });
            }

            // Remove Item Handler
            function setupRemoveItem() {
                document.querySelectorAll('.remove-item').forEach(button => {
                    button.addEventListener('click', function() {
                        const productCard = this.closest('.product-card');
                        const itemId = productCard.dataset.itemId;
                        
                        Swal.fire({
                            title: 'Remove from Wishlist?',
                            text: "This item will be removed from your wishlist",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#dc2626',
                            cancelButtonColor: '#1a1a1a',
                            confirmButtonText: 'Yes, remove it',
                            cancelButtonText: 'Cancel',
                            backdrop: 'rgba(0,0,0,0.4)',
                            customClass: {
                                popup: 'animated fadeInDown'
                            }
                        }).then((result) => {
                            if (result.isConfirmed) {
                                fetch(`/wishlist/remove/${itemId}`, {
                                    method: 'DELETE',
                                    credentials: 'same-origin'
                                })
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error(`HTTP error! status: ${response.status}`);
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    if (data.message === "Product removed from wishlist successfully") {
                                        productCard.style.animation = 'fadeOut 0.3s ease-out';
                                        setTimeout(() => {
                                            productCard.remove();
                                            
                                            if (document.querySelectorAll('.product-card').length === 0) {
                                                location.reload();
                                            }
                                        }, 300);

                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Removed',
                                            text: 'Item removed from your wishlist',
                                            showConfirmButton: false,
                                            timer: 1500,
                                            backdrop: 'rgba(0,0,0,0.1)',
                                            customClass: {
                                                popup: 'animated fadeInDown'
                                            }
                                        });
                                    } else {
                                        throw new Error(data.message || 'Unknown error occurred');
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Unable to Remove Item',
                                        text: 'Please try again later',
                                        confirmButtonColor: '#1a1a1a'
                                    });
                                });
                            }
                        });
                    });
                });
            }

            // Initialize all handlers
            setupQuantityControls();
            setupAddToCart();
            setupRemoveItem();
        });
    </script>

   
</body>
</html>
<%- include("../partials/user/footer") %>