<%- include("../partials/user/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fashion Checkout</title>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Poppins:wght@300;400;500;600&display=swap');

        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f8f7f6;
        }

        h2, h4, h5 {
            font-family: 'Playfair Display', serif;
            letter-spacing: 0.5px;
        }

        .checkout-container {
            background: linear-gradient(135deg, #ffffff 0%, #f8f7f6 100%);
            min-height: 100vh;
        }

        .card {
            background: white;
            border: none;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
            border-radius: 16px;
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 25px rgba(0, 0, 0, 0.07);
        }

        .form-control {
            border: 1.5px solid #e5e5e5;
            padding: 12px;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s;
        }

        .form-control:focus {
            border-color: #000;
            box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background-color: #000;
            border: none;
            padding: 14px 28px;
            font-weight: 500;
            letter-spacing: 0.5px;
            text-transform: uppercase;
            font-size: 14px;
        }

        .btn-primary:hover {
            background-color: #333;
            transform: translateY(-2px);
        }

        .form-check-input:checked {
            background-color: #000;
            border-color: #000;
        }

        .breadcrumb-item a {
            color: #666;
            text-decoration: none;
            font-size: 14px;
        }

        .breadcrumb-item a:hover {
            color: #000;
        }

        table {
            border-collapse: separate;
            border-spacing: 0 8px;
        }

        table th {
            font-weight: 500;
            color: #666;
            padding: 16px;
            background: #f8f7f6;
            border-radius: 8px;
        }

        table td {
            padding: 16px;
        }

        .address-card {
            border: 1.5px solid #e5e5e5;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 16px;
            transition: all 0.3s;
        }

        .address-card:hover {
            border-color: #000;
            background: #f8f7f6;
        }

        .form-check-label {
            padding: 8px;
            display: block;
        }

        #couponCode {
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
        }

        #applyCouponBtn {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }

        .payment-method-label {
            padding: 16px;
            border: 1.5px solid #e5e5e5;
            border-radius: 12px;
            margin-bottom: 12px;
            transition: all 0.3s;
        }

        .payment-method-label:hover {
            border-color: #000;
            background: #f8f7f6;
        }

        .delivery-badge {
            background: #e8f5e9;
            color: #2e7d32;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
        }

        .add-more-text {
            color: #666;
            font-size: 12px;
            margin-top: 4px;
        }
    </style>
</head>
<body>
    <div class="checkout-container py-12">
        <div class="container mx-auto px-4">
            <!-- Breadcrumb -->
            <nav aria-label="breadcrumb" class="mb-8">
                <ol class="flex items-center space-x-2">
                    <li><a href="/" class="hover:text-black transition-colors">Home</a></li>
                    <li><span class="mx-2">/</span></li>
                    <li><a href="/cart" class="hover:text-black transition-colors">Shopping Bag</a></li>
                    <li><span class="mx-2">/</span></li>
                    <li class="text-black font-medium">Checkout</li>
                </ol>
            </nav>
            
            <h2 class="text-4xl font-bold mb-12 text-center">Complete Your Order</h2>
            
            <div class="flex flex-wrap -mx-4">
                <!-- Left Column - Billing Details -->
                <div class="w-full lg:w-1/2 px-4 mb-8">
                    <div class="card p-8">
                        <h4 class="text-2xl font-bold mb-6">Delivery Details</h4>
                        
                        <!-- Saved Addresses -->
                        <div id="savedAddresses" class="mb-8">
                            <% if (addresses && addresses.length > 0) { %>
                                <h5 class="text-lg font-medium mb-4">Saved Addresses</h5>
                                <% addresses.forEach(function(address) { %>
                                    <div class="address-card">
                                        <input class="form-check-input" 
                                        type="radio" 
                                        name="address" 
                                        id="<%= address._id %>" 
                                        value="<%= address._id %>"
                                        <%= (address._id.toString() === defaultAddressId?.toString()) ? 'checked' : '' %>>
                                 
                                        <label class="form-check-label" for="<%= address._id %>">
                                            <span class="font-medium"><%= address.name || 'Name not provided' %></span><br>
                                            <span class="text-gray-600">
                                                <%= address.addressType || 'Default Type' %><br>
                                                <%= address.street || 'Street not provided' %>,
                                                <%= address.city || 'City not provided' %>,
                                                <%= address.state || 'State not provided' %> - 
                                                <%= address.pincode || 'Zip not provided' %>
                                            </span>
                                        </label>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <p class="text-gray-600 mb-4">No saved addresses found.</p>
                            <% } %>
                        </div>
                        
                        <!-- New Address Form -->
                        <h5 class="text-xl font-medium mb-6">Add New Address</h5>
                        <form id="newAddressForm" onsubmit="handleSubmit(event)" class="space-y-6">
                            <div id="error-message" class="text-red-500 mb-2"></div>
                            
                            <!-- Form fields with enhanced styling -->
                            <div class="mb-4">
                                <label for="name" class="block text-sm font-medium mb-2">Full Name</label>
                                <input type="text" class="form-control w-full" id="name" name="name">
                                <div id="nameError" class="text-red-500 mt-1 text-sm"></div>
                            </div>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <!-- Existing form fields with enhanced styling -->
                                <!-- Type and Street -->
                                <div>
                                    <label for="type" class="block text-sm font-medium mb-2">Address Type</label>
                                    <input type="text" class="form-control w-full" id="type" name="addressType">
                                    <div id="typeError" class="text-red-500 mt-1 text-sm"></div>
                                </div>
                                <div>
                                    <label for="street" class="block text-sm font-medium mb-2">Street Address</label>
                                    <input type="text" class="form-control w-full" id="street" name="street">
                                    <div id="streetError" class="text-red-500 mt-1 text-sm"></div>
                                </div>

                                <!-- Landmark and Pincode -->
                                <div>
                                    <label for="landMark" class="block text-sm font-medium mb-2">Landmark</label>
                                    <input type="text" class="form-control w-full" id="landMark" name="landMark">
                                    <div id="landMarkError" class="text-red-500 mt-1 text-sm"></div>
                                </div>
                                <div>
                                    <label for="pincode" class="block text-sm font-medium mb-2">Pincode</label>
                                    <input type="text" class="form-control w-full" id="pincode" name="pincode">
                                    <div id="pincodeError" class="text-red-500 mt-1 text-sm"></div>
                                </div>

                                <!-- City and State -->
                                <div>
                                    <label for="city" class="block text-sm font-medium mb-2">City</label>
                                    <input type="text" class="form-control w-full" id="city" name="city">
                                    <div id="cityError" class="text-red-500 mt-1 text-sm"></div>
                                </div>
                                <div>
                                    <label for="state" class="block text-sm font-medium mb-2">State</label>
                                    <input type="text" class="form-control w-full" id="state" name="state">
                                    <div id="stateError" class="text-red-500 mt-1 text-sm"></div>
                                </div>

                                <!-- Phone Numbers -->
                                <div>
                                    <label for="phone" class="block text-sm font-medium mb-2">Phone</label>
                                    <input type="text" class="form-control w-full" id="phone" name="phone">
                                    <div id="phoneError" class="text-red-500 mt-1 text-sm"></div>
                                </div>
                                <div>
                                    <label for="altPhone" class="block text-sm font-medium mb-2">Alternate Phone</label>
                                    <input type="text" class="form-control w-full" id="altPhone" name="altPhone">
                                    <div id="altPhoneError" class="text-red-500 mt-1 text-sm"></div>
                                </div>
                            </div>

                            <button type="submit" class="btn-primary w-full">
                                Save Address
                            </button>
                        </form>
                    </div>
                </div>
                
                <!-- Right Column - Order Summary -->
                <div class="w-full lg:w-1/2 px-4">
                    <div class="card p-8">
                        <h4 class="text-2xl font-bold mb-6">Order Summary</h4>
                        
                        <!-- Order Items -->
                        <div class="overflow-x-auto">
                            <table class="w-full">
                                <thead>
                                    <tr>
                                        <th class="text-left">Product</th>
                                        <th class="text-right">Subtotal</th>
                                    </tr>
                                </thead>
                                <tbody id="cartItems">
                                    <% cart.forEach(item => { %>
                                        <tr class="border-b border-gray-100">
                                            <td class="py-4">
                                                <div class="font-medium"><%= item.productId.productName %></div>
                                                <div class="text-gray-600 text-sm">Quantity: <%= item.quantity %></div>
                                            </td>
                                            <td class="text-right font-medium">
                                                ₹<%= (item.productId.salePrice * item.quantity).toFixed(2) %>
                                            </td>
                                        </tr>
                                    <% }) %>
                                </tbody>
                                <tfoot>
                                    <tr class="border-b border-gray-100">
                                        <td class="py-4">Subtotal</td>
                                        <td class="text-right font-medium">₹<%= total.toFixed(2) %></td>
                                    </tr>
                                    <tr class="border-b border-gray-100">
                                        <td class="py-4">Delivery Charge</td>
                                        <td class="text-right">
                                            <% if (total < 1000) { %>
                                                <div class="font-medium">₹250.00</div>
                                                <div class="add-more-text">
                                                    Add ₹<%= (1000 - total).toFixed(2) %> for free delivery
                                                </div>
                                            <% } else { %>
                                                <span class="delivery-badge">Free Delivery</span>
                                            <% } %>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="py-4 font-bold text-lg">Total</td>
                                        <td class="text-right font-bold text-lg">
                                            ₹<%= (total < 1000 ? total + 250 : total) - (discountAmount || 0) %>
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>

                            <!-- Coupon Section -->
                            <div class="mt-8">
                                <label for="couponCode" class="block text-sm font-medium mb-2">Have a Coupon?</label>
                                <div class="flex">
                                    <input type="text" class="form-control flex-grow" id="couponCode" name="couponCode" placeholder="Enter coupon code">
                                    <button onclick="applyCoupon()" id="applyCouponBtn" class="btn-primary ml-2">Apply</button>
                                    <button onclick="removeCoupon()" id="removeCouponBtn" class="hidden px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition duration-300 ml-2">
                                        <i class="fas fa-times mr-1"></i> Remove
                                    </button>
                                </div>
                            </div>
                            
                            <!-- Discount Applied Section -->
                            <div id="discountApplied" class="mt-4 hidden">
                                <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                                    <p class="text-green-700 font-medium flex items-center">
                                        <i class="fas fa-check-circle mr-2"></i>
                                        Discount Applied: <span id="discountAmount" class="ml-2">₹0.00</span>
                                    </p>
                                </div>
                            </div>
                
                            <!-- Payment Methods -->
                            <div class="mt-8">
                                <h5 class="text-xl font-medium mb-4">Payment Method</h5>
                                <div class="space-y-3">
                                    <label class="payment-method-label block cursor-pointer">
                                        <div class="flex items-center">
                                            <input type="radio" name="paymentMethod" id="cashOnDelivery" value="cashOnDelivery" 
                                                   class="form-radio h-4 w-4 text-black border-gray-300">
                                            <div class="ml-3">
                                                <span class="font-medium">Cash on Delivery</span>
                                                <p class="text-gray-500 text-sm mt-1">Pay when you receive your order</p>
                                            </div>
                                        </div>
                                    </label>
                                    
                                    <label class="payment-method-label block cursor-pointer">
                                        <div class="flex items-center">
                                            <input type="radio" name="paymentMethod" id="razorpay" value="razorpay" 
                                                   class="form-radio h-4 w-4 text-black border-gray-300">
                                            <div class="ml-3">
                                                <span class="font-medium">Razorpay</span>
                                                <p class="text-gray-500 text-sm mt-1">Safe and secure online payment</p>
                                            </div>
                                        </div>
                                    </label>
                                </div>
                            </div>
                            
                            <!-- Order Button -->
                            <button onclick="confirmOrder()" id="placeOrderBtn" 
                                    class="w-full bg-black text-white font-semibold py-4 px-6 rounded-lg 
                                           shadow-md hover:bg-gray-900 transition duration-300 mt-8
                                           flex items-center justify-center space-x-2">
                                <span>Place Order</span>
                                <i class="fas fa-arrow-right"></i>
                            </button>

                            <!-- Additional Info -->
                            <div class="mt-6 grid grid-cols-3 gap-4">
                                <div class="text-center">
                                    <i class="fas fa-shield-alt text-2xl text-gray-600 mb-2"></i>
                                    <p class="text-sm text-gray-600">Secure Payment</p>
                                </div>
                                <div class="text-center">
                                    <i class="fas fa-truck text-2xl text-gray-600 mb-2"></i>
                                    <p class="text-sm text-gray-600">Fast Delivery</p>
                                </div>
                                <div class="text-center">
                                    <i class="fas fa-undo text-2xl text-gray-600 mb-2"></i>
                                    <p class="text-sm text-gray-600">Easy Returns</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Adding animation on scroll library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.css">
    
   
    <script>
        // function applyCoupon() {
        //     const couponCode = document.getElementById('couponCode').value;
        //     if (couponCode) {
                
        //         $('#discountApplied').removeClass('hidden').addClass('animate__animated animate__fadeIn');
        //         $('#discountAmount').text('₹50.00'); // Example discount
        //         alert('Coupon applied successfully!');
        //     } else {
        //         alert('Please enter a valid coupon code.');
        //     }
        // }

        AOS.init({
            duration: 800,
            easing: 'ease-in-out'
        });

        // Add smooth scroll behavior
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });

        // Add loading state to buttons
        document.querySelectorAll('button').forEach(button => {
            button.addEventListener('click', function() {
                if (!this.classList.contains('loading')) {
                    this.classList.add('loading');
                    // Remove loading class after action completes
                    setTimeout(() => {
                        this.classList.remove('loading');
                    }, 1000);
                }
            });
        });



        async function handleSubmit(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);
    const formObject = Object.fromEntries(formData.entries());

    // Validation Regular Expressions
    const nameRegex = /^[A-Za-z\s'-.]+$/; // Name: letters, spaces, hyphens, apostrophes
    const phoneRegex = /^[0-9]{10}$/; // Phone: followed by 10digits
    const pincodeRegex = /^[0-9]{6}$/; // Pincode: exactly 6 digits
    const streetCityStateRegex = /^[A-Za-z0-9\s.,'-]+$/; // Allows alphanumeric characters, spaces, and some punctuation

    // Clear previous error messages
    const errorFields = [
        'nameError',
        'typeError',
        'streetError',
        'landMarkError',
        'pincodeError',
        'cityError',
        'stateError',
        'phoneError',
        'altPhoneError'
    ];
    
    errorFields.forEach(field => {
        document.getElementById(field).textContent = '';
    });

    let hasError = false; 

    
    if (!nameRegex.test(formObject.name)) {
        document.getElementById('nameError').textContent = "Please enter a valid name.";
        hasError = true;
    }

    if (!streetCityStateRegex.test(formObject.addressType)) {
        document.getElementById('typeError').textContent = "Please enter a valid address type .";
        hasError = true;
    }

    if (!streetCityStateRegex.test(formObject.street)) {
        document.getElementById('streetError').textContent = "Please enter a valid street .";
        hasError = true;
    }

    if (formObject.landMark && !streetCityStateRegex.test(formObject.landMark)) {
        document.getElementById('landMarkError').textContent = "Please enter a valid landmark .";
        hasError = true;
    }

    if (!pincodeRegex.test(formObject.pincode)) {
        document.getElementById('pincodeError').textContent = "Please enter a valid pincode (6 digits).";
        hasError = true;
    }

    if (!streetCityStateRegex.test(formObject.city)) {
        document.getElementById('cityError').textContent = "Please enter a valid city.";
        hasError = true;
    }

    if (!streetCityStateRegex.test(formObject.state)) {
        document.getElementById('stateError').textContent = "Please enter a valid state .";
        hasError = true;
    }

    if (!phoneRegex.test(formObject.phone)) {
        document.getElementById('phoneError').textContent = "Please enter a valid phone number (10 Digit).";
        hasError = true;
    }

    if (formObject.altPhone && !phoneRegex.test(formObject.altPhone)) {
        document.getElementById('altPhoneError').textContent = "Please enter a valid alternate phone number (10 digit).";
        hasError = true;
    }

    if (hasError) {
        return; 
    }

    try {
        const response = await fetch('/CheckoutaddAddress', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(formObject),
        });

        const textResponse = await response.text(); 
        console.log("Response Text:", textResponse); 
        const result = JSON.parse(textResponse); 

        if (!response.ok) {
            throw new Error(result.error || 'An error occurred');
        }

        // Add the new address to the list of saved addresses
        // Update the part where you add a new address
            const savedAddresses = document.getElementById('savedAddresses');
            const existingAddresses = savedAddresses.querySelectorAll('input[type="radio"]');
            const newAddressHtml = `
                <div class="form-check mb-4 animate__animated animate__fadeIn bg-white p-4 rounded-lg shadow-sm hover:shadow-md transition duration-300">
                    <input class="form-check-input" 
                        type="radio" 
                        name="address" 
                        id="${result.address._id}" 
                        value="${result.address._id}"
                        ${existingAddresses.length === 0 ? 'checked' : ''}>
                    <label class="form-check-label ml-2 cursor-pointer" for="${result.address._id}">
                        <span class="font-medium text-gray-700">${result.address.name || 'Name not provided'}</span><br>
                        <span class="text-sm text-gray-500">${result.address.addressType || 'Default Type'},
                        ${result.address.street || 'Street not provided'},
                        ${result.address.city || 'City not provided'},
                        ${result.address.state || 'State not provided'} - 
                        ${result.address.pincode || 'Zip not provided'}</span>
                    </label>
                </div>
            `;
        savedAddresses.insertAdjacentHTML('beforeend', newAddressHtml);

        // Clear the form
        form.reset();

        alert('Address saved successfully!');
    } catch (error) {
        console.error('Error saving address:', error);
        alert(`There was an error saving the address: ${error.message}`);
    }
}


 





//payment 

async function confirmOrder() {
    try {
        // Get form elements with null checks
        const addressInput = document.querySelector('input[name="address"]:checked');
        const paymentMethodInput = document.querySelector('input[name="paymentMethod"]:checked');
        const couponCodeInput = document.querySelector('input[name="couponCode"]');
        
        // Get total amount from the table's last row
        const totalRow = document.querySelector('table tfoot tr:last-child td:last-child');
        const amount = totalRow ? parseFloat(totalRow.textContent.replace('₹', '').trim()) : 0;
        
        // Validate required fields
        if (!addressInput) {
            Swal.fire({
                icon: 'warning',
                title: 'Address Required',
                text: 'Please select an address before placing the order.',
                confirmButtonColor: '#3085d6'
            });
            return;
        }

        if (!paymentMethodInput) {
            Swal.fire({
                icon: 'warning',
                title: 'Payment Method Required',
                text: 'Please select a payment method before placing the order.',
                confirmButtonColor: '#3085d6'
            });
            return;
        }

        // Build request body
        const requestBody = {
            addressId: addressInput.value,
            paymentMethod: paymentMethodInput.value,
            amount: amount
        };

        // Add coupon code if it exists and has a value
        if (couponCodeInput && couponCodeInput.value.trim()) {
            requestBody.couponCode = couponCodeInput.value.trim();
        }

        // Validate amount
        if (requestBody.amount <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid Amount',
                text: 'Order amount must be greater than 0.',
                confirmButtonColor: '#3085d6'
            });
            return;
        }

        // Process based on payment method
        if (paymentMethodInput.value === 'cashOnDelivery') {
            await processCashOnDelivery(requestBody);
        } else if (paymentMethodInput.value === 'razorpay') {
            await processRazorpayPayment(requestBody);
        }

    } catch (error) {
        console.error('Error in confirmOrder:', error);
        Swal.fire({
            icon: 'error',
            title: 'Order Processing Error',
            text: 'An error occurred while processing your order. Please try again.',
            confirmButtonColor: '#3085d6'
        });
    }
}

async function processRazorpayPayment(requestBody) {
    try {
        // Get user details with null checks
        const nameInput = document.querySelector('input[name="name"]');
        const phoneInput = document.querySelector('input[name="phone"]');

        // First create the Razorpay order
        const response = await fetch("/create-razorpay-order", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(requestBody),
        });

        const orderData = await response.json();
        
        if (!orderData.success) {
            throw new Error(orderData.message || 'Failed to create order');
        }

        const options = {
            key: orderData.key_id,
            amount: orderData.amount,
            currency: "INR",
            name: "Gerad_fashions",
            description: "Purchase Payment",
            order_id: orderData.orderId,
            handler: async function (response) {
                try {
                    // After successful payment, verify and create the order
                    const verifyResponse = await fetch("/verify-payment", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            ...requestBody,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_signature: response.razorpay_signature,
                        }),
                    });

                    const verificationData = await verifyResponse.json();
                    
                    if (verificationData.success) {
                        // Create the actual order in your database
                        const createOrderResponse = await fetch("/place-order", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({
                                ...requestBody,
                                paymentDetails: {
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature,
                                }
                            }),
                        });

                        const orderResult = await createOrderResponse.json();
                        handleOrderResponse(orderResult);
                    } else {
                        throw new Error(verificationData.message || 'Payment verification failed');
                    }
                } catch (error) {
                    console.error("Payment verification failed:", error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Verification Failed',
                        text: 'There was an error verifying your payment.',
                        confirmButtonColor: '#3085d6'
                    });
                }
            },
            prefill: {
                name: nameInput ? nameInput.value : '',
                contact: phoneInput ? phoneInput.value : '',
            },
            theme: {
                color: "#3b82f6"
            }
        };

        const rzp = new Razorpay(options);

        rzp.on('payment.failed', function (response) {
            console.error("Payment failed:", response.error);
            Swal.fire({
                icon: 'error',
                title: 'Payment Failed',
                text: 'Your payment was unsuccessful. Please try again.',
                confirmButtonColor: '#3085d6'
            });
        });

        rzp.open();

    } catch (error) {
        console.error("Error initiating payment:", error);
        Swal.fire({
            icon: 'error',
            title: 'Payment Initiation Failed',
            text: 'There was an error starting the payment process.',
            confirmButtonColor: '#3085d6'
        });
    }
}


async function processCashOnDelivery(requestBody) {
    try {
        // Make API call to place the order
        const response = await fetch("/place-order", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                ...requestBody,
                paymentMethod: 'cashOnDelivery',
                paymentDetails: {
                    paymentStatus: 'Pending'  // COD payments are pending until delivery
                }
            }),
        });

        const orderResult = await response.json();
        handleOrderResponse(orderResult);

    } catch (error) {
        console.error("Error processing Cash on Delivery order:", error);
        Swal.fire({
            icon: 'error',
            title: 'Order Processing Failed',
            text: 'There was an error processing your Cash on Delivery order.',
            confirmButtonColor: '#3085d6'
        });
    }
}
function handleOrderResponse(data) {
    if (data.success) {
        Swal.fire({
            icon: 'success',
            title: 'Order Placed Successfully!',
            text: data.message || 'Your order has been placed successfully.',
            showConfirmButton: true,
            confirmButtonColor: '#3085d6',
            allowOutsideClick: false
        }).then((result) => {
            if (result.isConfirmed) {
                // Use the orderId from the order creation response
                window.location.href = `/success?orderId=${data.orderDetails?.orderId || data.orderId}`;
            }
        });
    } else {
        if (data.quantityErrors && data.quantityErrors.length > 0) {
            const errorMessage = data.quantityErrors.join('\n');
            Swal.fire({
                icon: 'error',
                title: 'Unable to Place Order',
                text: errorMessage,
                confirmButtonColor: '#3085d6'
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Order Failed',
                text: data.message || 'An error occurred while placing the order.',
                confirmButtonColor: '#3085d6'
            });
        }
    }
}


    // Helper function to handle errors
function handleError(message) {
    alert(message);
}

// Helper function to add discount row to cart table
function addDiscountRow(discountAmount) {
    // Remove any existing discount row first
    removeExistingDiscountRow();
    
    const tbody = document.querySelector('tbody');
    const discountRow = document.createElement('tr');
    discountRow.id = 'discountRow';
    discountRow.innerHTML = `
        <td class="text">Discount Applied:</td>
        <td  class="text-right text-green-600">-₹${discountAmount.toFixed(2)}</td>
    `;
    tbody.appendChild(discountRow);
}

// Helper function to remove existing discount row
function removeExistingDiscountRow() {
    const existingDiscountRow = document.getElementById('discountRow');
    if (existingDiscountRow) {
        existingDiscountRow.remove();
    }
}

// Main function to apply coupon
async function applyCoupon() {
    const couponInput = document.getElementById('couponCode');
    const couponCode = couponInput.value.trim();
    
    if (!couponCode) {
        handleError('Please enter a valid coupon code.');
        return;
    }

    // Disable the apply button and input while processing
    const applyButton = document.getElementById('applyCouponBtn');
    applyButton.disabled = true;
    couponInput.disabled = true;

    try {
        const response = await fetch('/applyCoupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ couponCode }) 
        });

        const data = await response.json();
        console.log('Received response:', data);

        if (data.success) {
            updateCartDisplay(data);
        } else {
            handleError(data.message || 'Invalid coupon code');
            // Re-enable input and button on error
            applyButton.disabled = false;
            couponInput.disabled = false;
        }
    } catch (error) {
        console.error('Error:', error);
        handleError('Error applying coupon. Please try again.');
        // Re-enable input and button on error
        applyButton.disabled = false;
        couponInput.disabled = false;
    }
}

// Function to update cart display after successful coupon application
function updateCartDisplay(data) {
    // Get elements
    const totalElement = document.querySelector('tfoot tr:last-child td:last-child');
    const discountAppliedDiv = document.getElementById('discountApplied');
    const discountAmountSpan = document.getElementById('discountAmount');
    const removeCouponBtn = document.getElementById('removeCouponBtn');
    const applyCouponBtn = document.getElementById('applyCouponBtn');
    const couponInput = document.getElementById('couponCode');

    // Format numbers
    const discountAmount = parseFloat(data.discountAmount);
    const newTotal = parseFloat(data.newTotal);

    // Update total and discount display
    totalElement.textContent = `₹${newTotal.toFixed(2)}`;
    
    if (discountAppliedDiv && discountAmountSpan) {
        discountAppliedDiv.classList.remove('hidden');
        discountAmountSpan.textContent = `₹${discountAmount.toFixed(2)}`;
    }

    // Add discount row to cart
    addDiscountRow(discountAmount);

    // Update UI elements
    removeCouponBtn.classList.remove('hidden');
    applyCouponBtn.classList.add('hidden');
    couponInput.disabled = true;

    // Show success message
    alert('Coupon applied successfully!');
}

// Function to remove coupon
async function removeCoupon() {
    const removeCouponBtn = document.getElementById('removeCouponBtn');
    removeCouponBtn.disabled = true;

    try {
        const response = await fetch('/removeCoupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();
        console.log('Received response:', data);

        if (data.success) {
            resetCouponDisplay(data);
        } else {
            handleError(data.message || 'Error removing coupon');
            removeCouponBtn.disabled = false;
        }
    } catch (error) {
        console.error('Error:', error);
        handleError('Error removing coupon. Please try again.');
        removeCouponBtn.disabled = false;
    }
}

// Function to reset display after coupon removal
function resetCouponDisplay(data) {
    // Get elements
    const totalElement = document.querySelector('tfoot tr:last-child td:last-child');
    const discountAppliedDiv = document.getElementById('discountApplied');
    const couponInput = document.getElementById('couponCode');
    const removeCouponBtn = document.getElementById('removeCouponBtn');
    const applyCouponBtn = document.getElementById('applyCouponBtn');

    // Remove discount row
    removeExistingDiscountRow();

    // Calculate final total with delivery charge
    const originalTotal = parseFloat(data.originalTotal);
    const deliveryCharge = originalTotal < 1000 ? 250 : 0;
    const finalTotal = originalTotal + deliveryCharge;

    // Update UI
    totalElement.textContent = `₹${finalTotal.toFixed(2)}`;
    if (discountAppliedDiv) {
        discountAppliedDiv.classList.add('hidden');
    }

    // Reset input and buttons
    couponInput.value = '';
    couponInput.disabled = false;
    removeCouponBtn.classList.add('hidden');
    applyCouponBtn.classList.remove('hidden');
    applyCouponBtn.disabled = false;

    alert('Coupon removed successfully!');
}

    </script>
</body>
</html>