<%- include("../partials/user/header") %>



    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Address Management - Fashion E-commerce</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@400;500;600;700&family=Montserrat:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Montserrat', sans-serif;
            background-color: #F8F7F4;
        }
        
        h1, h2, h3 {
            font-family: 'Cormorant Garamond', serif;
        }
        
        .fashion-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(229, 231, 235, 0.5);
        }
        
        .fashion-input {
            background: #F8F7F4;
            border: 1px solid #E5E7EB;
            transition: all 0.3s ease;
        }
        
        .fashion-input:focus {
            border-color: #1a1a1a;
            box-shadow: 0 0 0 2px rgba(26, 26, 26, 0.1);
        }
        
        .fashion-button {
            background: #1a1a1a;
            color: white;
            transition: all 0.3s ease;
        }
        
        .fashion-button:hover {
            background: #333333;
            transform: translateY(-2px);
        }

        .sidebar-link {
            transition: all 0.3s ease;
        }

        .sidebar-link:hover {
            background-color: #f3f4f6;
        }

        .sidebar-link.active {
            background-color: #f3f4f6;
            color: #000;
            font-weight: 500;
        }
    </style>
</head>
<body class="min-h-screen">

    
    <div class="container mx-auto px-4 py-12 max-w-7xl">
        <!-- Elegant Breadcrumb -->
        <nav aria-label="breadcrumb" class="mb-12">
            <ol class="flex items-center space-x-2 text-sm text-gray-600">
                <li><a href="/" class="hover:text-black transition-colors">Home</a></li>
                <li><span class="mx-2">/</span></li>
                <li><a href="/addresses" class="hover:text-black transition-colors">Addresses</a></li>
            </ol>
        </nav>

        <!-- Main Content with Sidebar Layout -->
        <div class="flex flex-col lg:flex-row gap-8">
            <!-- Sidebar -->
            <aside class="lg:w-1/4">
                <div class="fashion-card rounded-xl p-8 static top-8">
                    <h2 class="text-3xl font-light mb-8 tracking-wide">ACCOUNT</h2>
                    <ul class="space-y-4">
                        <li>
                            <a href="/profile" class="sidebar-link block py-2 px-4 rounded-lg">
                                <i class="fas fa-user mr-3"></i> Profile
                            </a>
                        </li>
                        <li>
                            <a href="/address" class="sidebar-link block py-2 px-4 rounded-lg active">
                                <i class="fas fa-map-marker-alt mr-3"></i> Addresses
                            </a>
                        </li>
                        <li>
                            <a href="/order" class="sidebar-link block py-2 px-4 rounded-lg">
                                <i class="fas fa-shopping-bag mr-3"></i> Orders
                            </a>
                        </li>
                        <li>
                            <a href="/wallet" class="sidebar-link block py-2 px-4 rounded-lg">
                                <i class="fas fa-wallet mr-3"></i> Wallet
                            </a>
                        </li>
                        <li>
                            <a href="/coupon" class="sidebar-link block py-2 px-4 rounded-lg">
                                <i class="fas fa-ticket-alt mr-3"></i> Coupons
                            </a>
                        </li>
                    </ul>
                </div>
            </aside>

            <!-- Main Content -->
            <main class="lg:w-3/4">
                <div class="fashion-card rounded-xl p-8">
                    <h2 class="text-3xl font-light tracking-wide mb-8">MY ADDRESSES</h2>
                    
                    <!-- Existing Addresses -->
                    <div class="space-y-4 mb-8">
                        <% addresses.forEach(function(userAddress) { %>
                            <% userAddress.address.forEach(function(address) { %>
                                <div class="border p-4 rounded">
                                    <h3 class="inline-block bg-gray-100 text-black-700 px-3 py-0.5 text-s rounded mb-2"><%= address.addressType || 'Default Type' %></h3>
                                    <h2 class="font-semibold"><%= address.name || 'Name not provided' %></h2>
                                    <p><%= address.street || 'Street not provided' %></p>
                                    <p><%= address.phone %></p>
                                    <p><%= address.city || 'City not provided' %>, <%= address.state || 'State not provided' %>, <%= address.pincode || 'Zip not provided' %></p>
                                    <div class="mt-2">
                                        <button class="text-blue-500 hover:underline mr-2" onclick="editAddress('<%= address._id %>')">Edit</button>
                                        <button class="text-red-500 hover:underline" onclick="deleteAddress('<%= address._id %>')">Delete</button>
                                    </div>
                                    <div class="mt-2">
                                        <% if (address.isDefault) { %>
                                            <span class="text-green-500 font-semibold">Default Address</span>
                                        <% } else { %>
                                            <button class="text-blue-500 hover:underline" onclick="setDefaultAddress('<%= address._id %>')">Set as Default</button>
                                        <% } %>
                                    </div>
                                </div>
                            <% }); %>
                        <% }); %>
                    </div>

                    <!-- Add New Address Form -->
                    <form class="mt-6" id="addAddressForm" action="/addAddress" method="POST">
                        <h3 class="text-lg font-semibold mb-4">Add New Address</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <div>
                                <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                                <input type="text" id="name" name="name" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                <span id="NameError" class="text-red-500 text-sm"></span>
                            </div>
                            <div>
                                <label for="type" class="block text-sm font-medium text-gray-700 mb-1">Type</label>
                                <select id="type" name="addressType" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                    <option value="Home">Home</option>
                                    <option value="Work">Work</option>
                                </select>
                            </div>
                            <!-- Rest of the form fields... -->
                            <div>
                                <label for="street" class="block text-sm font-medium text-gray-700 mb-1">Street</label>
                                <input type="text" id="street" name="street" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                <span id="StreetError" class="text-red-500 text-sm"></span>
                            </div>
                            <div>
                                <label for="landMark" class="block text-sm font-medium text-gray-700 mb-1">Landmark</label>
                                <input type="text" id="landMark" name="landMark" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                <span id="LandMarkError" class="text-red-500 text-sm"></span>
                            </div>
                            <div>
                                <label for="city" class="block text-sm font-medium text-gray-700 mb-1">City</label>
                                <input type="text" id="city" name="city" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                <span id="CityError" class="text-red-500 text-sm"></span>
                            </div>
                            <div>
                                <label for="state" class="block text-sm font-medium text-gray-700 mb-1">State</label>
                                <input type="text" id="state" name="state" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                <span id="StateError" class="text-red-500 text-sm"></span>
                            </div>
                            <div>
                                <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                                <input type="text" id="phone" name="phone" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                <span id="PhoneError" class="text-red-500 text-sm"></span>
                            </div>
                            <div>
                                <label for="pincode" class="block text-sm font-medium text-gray-700 mb-1">Pincode</label>
                                <input type="text" id="pincode" name="pincode" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                <span id="PincodeError" class="text-red-500 text-sm"></span>
                            </div>
                            <div>
                                <label for="altPhone" class="block text-sm font-medium text-gray-700 mb-1">Alternate Phone</label>
                                <input type="text" id="altPhone" name="altPhone" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                <span id="AltPhoneError" class="text-red-500 text-sm"></span>
                            </div>
                        </div>
                        <button type="submit" class="w-full bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition-colors duration-300">
                            Add Address
                        </button>
                    </form>
                </div>
            </main>
        </div>
    </div>
</body>
</html>

    <!-- Edit Address Modal -->
    <%- include("../partials/editAddressModal") %>

    <script>
         async function deleteAddress(id) {
            const confirmation = confirm("Are you sure you want to delete this address?");
            if (confirmation) {
                try {
                    const response = await fetch(`/addresses/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const data = await response.json();
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert(data.error);
                    }
                } catch (error) {
                    console.error("Error deleting address:", error);
                    alert('An error occurred while deleting the address.');
                }
            }
        }
        
        async function editAddress(id) {
    try {
        const response = await fetch(`/addresses/${id}`);
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || 'Failed to fetch address details');
        }

        const address = data.address;
        if (!address) {
            throw new Error('Address data is missing or undefined');
        }

        document.getElementById('editAddressId').value = id;
        document.getElementById('editAddressName').value = address.name || '';
        document.getElementById('editAddressType').value = address.addressType || '';
        document.getElementById('editAddressStreet').value = address.street || '';
        document.getElementById('editAddressCity').value = address.city || '';
        document.getElementById('editAddressLandMark').value = address.landMark || '';
        document.getElementById('editAddressState').value = address.state || '';
        document.getElementById('editAddressPincode').value = address.pincode || '';
        document.getElementById('editAddressPhone').value = address.phone || '';
        document.getElementById('editAddressAltPhone').value = address.altPhone || '';

        // Clear any existing error messages
        const errorElements = document.querySelectorAll('#editAddressModal .text-red-500');
        errorElements.forEach(el => el.innerText = '');

        document.getElementById('editAddressModal').style.display = 'flex';
    } catch (error) {
        console.error('Error in editAddress function:', error);
        alert(`An error occurred while fetching address details: ${error.message}`);
    }
}
        function logModalValues() {
            console.log('Modal values:');
            console.log('name', document.getElementById('editAddressName').value);
            console.log('Type:', document.getElementById('editAddressType').value);
            console.log('Street:', document.getElementById('editAddressStreet').value);
            console.log('City:', document.getElementById('editAddressCity').value);
            console.log('Landmark:', document.getElementById('editAddressLandMark').value);
            console.log('State:', document.getElementById('editAddressState').value);
            console.log('Pincode:', document.getElementById('editAddressPincode').value);
            console.log('Phone:', document.getElementById('editAddressPhone').value);
            console.log('Alt Phone:', document.getElementById('editAddressAltPhone').value);
        }
        
        // document.getElementById('editAddressForm').onsubmit = async function (event) {
        //     event.preventDefault(); // Prevent the default form submission
        //     const id = document.getElementById('editAddressId').value; // Get ID from a hidden input in the form
        
        //     // Call the editAddress function with the extracted ID
        //     await editAddress(id); 
        // };
        document.getElementById('editAddressForm').onsubmit = async function (event) {
    event.preventDefault(); // Prevent the default form submission
    const id = document.getElementById('editAddressId').value; // Get ID from a hidden input in the form

    // Validate the form before attempting to update
    if (validateAddressForm('editAddressForm', 'edit')) {
        await updateAddress(id); // Only call updateAddress if validation passes
    }
};

       
// Utility function to validate input fields
function validateField(value, regex, errorElement, errorMessage) {
    if (!regex.test(value)) {
        errorElement.innerText = errorMessage;
        return false;
    }
    errorElement.innerText = '';
    return true;
}

// Utility function to validate required fields
function validateRequired(value, errorElement, fieldName) {
    if (!value.trim()) {
        errorElement.innerText = `${fieldName} is required.`;
        return false;
    }
    errorElement.innerText = '';
    return true;
}

// Regex patterns for validation
const patterns = {
    name: /^[A-Za-z\s.,'&@-]{2,50}$/,
    phone: /^[6-9]\d{9}$/,
    pincode: /^\d{6}$/,
    street: /^[A-Za-z0-9\s.,'&@-]{5,100}$/,
    landMark: /^[A-Za-z0-9\s.,'&@-]{3,50}$/,
    city: /^[A-Za-z\s.,'&@-]{2,30}$/,
    state: /^[A-Za-z\s.,'&@-]{2,30}$/
};

// Function to validate all fields in a form
function validateAddressForm(formId, errorPrefix = '') {
    const form = document.getElementById(formId);
    let isValid = true;

    // Validate Name
    isValid = validateRequired(form.name.value, document.getElementById(`${errorPrefix}NameError`), 'Name') && isValid;
    isValid = validateField(form.name.value, patterns.name, document.getElementById(`${errorPrefix}NameError`), 'Please enter a valid name (2-50 characters)') && isValid;

    // Validate Street
    isValid = validateRequired(form.street.value, document.getElementById(`${errorPrefix}StreetError`), 'Street') && isValid;
    isValid = validateField(form.street.value, patterns.street, document.getElementById(`${errorPrefix}StreetError`), 'Please enter a valid street address (5-100 characters)') && isValid;

    // Validate Landmark
    isValid = validateRequired(form.landMark.value, document.getElementById(`${errorPrefix}LandMarkError`), 'Landmark') && isValid;
    isValid = validateField(form.landMark.value, patterns.landMark, document.getElementById(`${errorPrefix}LandMarkError`), 'Please enter a valid landmark (3-50 characters)') && isValid;

    // Validate City
    isValid = validateRequired(form.city.value, document.getElementById(`${errorPrefix}CityError`), 'City') && isValid;
    isValid = validateField(form.city.value, patterns.city, document.getElementById(`${errorPrefix}CityError`), 'Please enter a valid city name (2-30 characters)') && isValid;

    // Validate State
    isValid = validateRequired(form.state.value, document.getElementById(`${errorPrefix}StateError`), 'State') && isValid;
    isValid = validateField(form.state.value, patterns.state, document.getElementById(`${errorPrefix}StateError`), 'Please enter a valid state name (2-30 characters)') && isValid;

    // Validate Phone
    isValid = validateRequired(form.phone.value, document.getElementById(`${errorPrefix}PhoneError`), 'Phone') && isValid;
    isValid = validateField(form.phone.value, patterns.phone, document.getElementById(`${errorPrefix}PhoneError`), 'Please enter a valid 10-digit phone number') && isValid;

    // Validate Pincode
    isValid = validateRequired(form.pincode.value, document.getElementById(`${errorPrefix}PincodeError`), 'Pincode') && isValid;
    isValid = validateField(form.pincode.value, patterns.pincode, document.getElementById(`${errorPrefix}PincodeError`), 'Please enter a valid 6-digit pincode') && isValid;

    // Validate Alternate Phone (if provided)
    if (form.altPhone.value) {
        isValid = validateField(form.altPhone.value, patterns.phone, document.getElementById(`${errorPrefix}AltPhoneError`), 'Please enter a valid 10-digit alternate phone number') && isValid;
    } else {
        document.getElementById(`${errorPrefix}AltPhoneError`).innerText = '';
    }

    return isValid;
}

// Validation for Add New Address form
document.getElementById('addAddressForm').addEventListener('submit', function(event) {
    event.preventDefault();
    if (validateAddressForm('addAddressForm')) {
        this.submit();
    }
});

// Validation for Edit Address form
document.getElementById('editAddressForm').addEventListener('submit', function(event) {
    event.preventDefault();
    if (validateAddressForm('editAddressForm', 'edit')) {
        updateAddress(this.id.value);
    }
});

// Function to update address
async function updateAddress(id) {
    if (!validateAddressForm('editAddressForm', 'edit')) {
        return; // Stop the function if validation fails
    }

    const form = document.getElementById('editAddressForm');
    const addressData = {
        name: form.name.value,
        addressType: form.addressType.value,
        street: form.street.value,
        city: form.city.value,
        landMark: form.landMark.value,
        state: form.state.value,
        pincode: form.pincode.value,
        phone: form.phone.value,
        altPhone: form.altPhone.value,
    };

    try {
        const response = await fetch(`/addresses/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(addressData),
        });

        if (!response.ok) {
            const data = await response.json(); // Get the error response
            throw new Error(data.error || 'Failed to update address');
        }

        // If successful, you can redirect or update the UI accordingly
        console.log('Address updated successfully:', await response.json());
        document.getElementById('updateSuccessMessage').innerText = 'Address updated successfully!';
        setTimeout(() => {
            closeModal(); // Close the modal
            location.reload(); // Reload the page to see the updated address
        }, 2000);
    } catch (error) {
        console.error('Error updating address:', error);
        document.getElementById('updateErrorMessage').innerText = `An error occurred while updating the address: ${error.message}`;
    }
}


// Add input event listeners for real-time validation
function addInputListeners(formId, errorPrefix = '') {
    const form = document.getElementById(formId);
    const fields = ['name', 'street', 'landMark', 'city', 'state', 'phone', 'pincode', 'altPhone'];

    fields.forEach(field => {
        form[field].addEventListener('input', function() {
            if (this.value.trim()) {
                validateField(this.value, patterns[field], document.getElementById(`${errorPrefix}${field.charAt(0).toUpperCase() + field.slice(1)}Error`), `Please enter a valid ${field}`);
            } else {
                document.getElementById(`${errorPrefix}${field.charAt(0).toUpperCase() + field.slice(1)}Error`).innerText = '';
            }
        });
    });
}

// Add input listeners to both forms
addInputListeners('addAddressForm');
addInputListeners('editAddressForm', 'edit');
        // Function to close the modal
        function closeModal() {
    document.getElementById('editAddressModal').style.display = 'none';
    document.getElementById('editAddressForm').reset();
    const errorElements = document.querySelectorAll('#editAddressModal .text-red-500');
    errorElements.forEach(el => el.innerText = '');
    document.getElementById('updateSuccessMessage').innerText = '';
    document.getElementById('updateErrorMessage').innerText = '';
}
        // Event listener for opening the modal
        document.querySelectorAll('.edit-address-button').forEach(button => {
            button.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                editAddress(id);
            });
        });
         // Check the URL for the update success parameter
         const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('update') === 'success') {
                alert('Profile updated successfully!');
            } else if (urlParams.get('update') === 'error') {
                alert('An error occurred while updating the profile.');
            }
        
        
            function setDefaultAddress(addressId) {
    fetch(`/setDefaultAddress/${addressId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload(); // Refresh to update the default address visually
        } else {
            alert('Failed to set default address');
        }
    })
    .catch(error => console.error('Error:', error));
}

       
    </script>
</body>
</html>