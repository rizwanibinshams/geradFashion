<%- include("../partials/user/header") %>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Luxe Collection - Premium Fashion</title>
    <script src="https://cdn.tailwindcss.com"></script>
    
    <style>
        .product-card {
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .product-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        
        /* Enhanced mobile category styles */
        .category-wrapper {
            position: relative;
        }

        .category-toggle {
            position: relative;
            transition: all 0.3s ease;
        }

        .category-toggle::after {
            content: '';
            position: absolute;
            right: 16px;
            top: 50%;
            width: 8px;
            height: 8px;
            border-right: 2px solid #666;
            border-bottom: 2px solid #666;
            transform: translateY(-50%) rotate(45deg);
            transition: transform 0.3s ease;
        }

        .category-toggle.active::after {
            transform: translateY(-50%) rotate(-135deg);
        }

        .category-list {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.5s ease-out;
        }

        .category-list.show {
            max-height: 500px;
        }

        @media (min-width: 768px) {
            .category-toggle::after {
                display: none;
            }
            
            .category-list {
                max-height: none !important;
                overflow: visible;
            }
        }
        .offer-tag {
            position: absolute;
            top: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.85);
            color: white;
            padding: 8px 12px;
            clip-path: polygon(0 0, 100% 0, 100% 100%, 10% 100%);
            font-size: 0.85rem;
            letter-spacing: 0.05em;
            z-index: 10;
            min-width: 120px;
            text-align: right;
        }

        .seasonal-tag {
            position: absolute;
            bottom: 20px;
            left: 0;
            background: white;
            color: black;
            padding: 6px 15px;
            font-size: 0.75rem;
            letter-spacing: 0.1em;
            text-transform: uppercase;
            z-index: 10;
        }

        .sale-badge {
            background: linear-gradient(45deg, #ff4646, #ff8080);
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 10;
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 0.75rem;
            letter-spacing: 0.05em;
            color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body class="bg-gray-50">
    <main class="container mx-auto px-4 py-12 mt-15">
        <!-- Elegant Breadcrumbs -->
        <nav aria-label="breadcrumb" class="mb-12">
            <ol class="flex items-center space-x-2 text-sm text-gray-500">
                <li><a href="/" class="hover:text-black transition-colors">Home</a></li>
                <li><span class="mx-2">•</span></li>
                <li><a href="/products" class="hover:text-black transition-colors">Collection</a></li>
            </ol>
        </nav>

        <div class="flex flex-col md:flex-row gap-8">
            <!-- Refined Sidebar -->
            <aside class="md:w-1/4 lg:w-1/5">
                <div class="category-wrapper bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
                    <!-- Mobile Category Toggle -->
                    <button class="category-toggle w-full md:hidden text-left p-6 bg-white font-light text-xl tracking-wide flex justify-between items-center">
                        Categories
                    </button>

                    <!-- Category List -->
                    <div class="category-list">
                        <div class="p-6 pt-0 md:pt-6">
                            <ul class="space-y-4">
                                <li>
                                    <a href="/products" 
                                       class="category-link block py-2 px-3 rounded-lg hover:bg-gray-50 transition-colors <%= currentCategory === 'All' ? 'font-medium text-black bg-gray-50' : 'text-gray-600' %>">
                                        All Collections
                                    </a>
                                </li>

                                <% categories.forEach(category => { %>
                                    <li>
                                        <a href="/products?category=<%= category.name %>" 
                                           class="category-link block py-2 px-3 rounded-lg hover:bg-gray-50 transition-colors <%= currentCategory === category.name ? 'font-medium text-black bg-gray-50' : 'text-gray-600' %>">
                                            <%= category.name %>
                                        </a>
                                    </li>
                                <% }) %>
                            </ul>
                        </div>
                    </div>
                </div>
            </aside>

            <!-- Main Content -->
            <div class="flex-1">
              <!-- sorting -->
                <div class="flex justify-between items-center mb-8">
                    <h2 class="text-2xl font-light tracking-wide">Our Collection</h2>
                    <select id="priceFilter" class="px-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-black focus:border-transparent">
                        <option value="default" <%= currentSort === 'default' ? 'selected' : '' %>>Curated Selection</option>
                        <option value="low-high" <%= currentSort === 'low-high' ? 'selected' : '' %>>Price: Low to High</option>
                        <option value="high-low" <%= currentSort === 'high-low' ? 'selected' : '' %>>Price: High to Low</option>
                        <option value="az" <%= currentSort === 'az' ? 'selected' : '' %>>Name: A to Z</option>
                        <option value="za" <%= currentSort === 'za' ? 'selected' : '' %>>Name: Z to A</option>
                    </select>
                </div>

                
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                    <% if (products.length > 0) { %>
                        <% products.forEach(product => { %>
                            <div class="product-card bg-white rounded-xl overflow-hidden relative">
                               
                                <% const discount = Math.abs(((product.regularPrice - product.salePrice) / product.regularPrice) * 100); %>
                                <% if (discount > 0) { %>
                                   
                                    <div class="sale-badge">
                                        <%= discount.toFixed(0) %>% OFF
                                    </div>

                                    
                                    <div class="offer-tag">
                                        LIMITED TIME
                                    </div>

                                    <!-- Seasonal Tag (shows only for discounts > 20%) -->
                                    <% if (discount > 20) { %>
                                        <div class="offer-tag">
                                            Season Special
                                        </div>
                                    <% } %>
                                <% } %>

                                <!-- Product Image  -->
                                <a href="/productDetails?id=<%= product._id %>" class="block overflow-hidden relative">
                                    <img class="h-80 w-full object-cover transform hover:scale-105 transition-transform duration-500" 
                                         src="/uploads/product-images/<%= product.productImage[0] %>" 
                                         alt="<%= product.productName %>">
                                </a>

                                <!-- Product Details -->
                                <div class="p-6">
                                    <div class="mb-4">
                                        <h5 class="text-lg font-medium mb-2"><%= product.productName %></h5>
                                        <p class="text-gray-500 text-sm"><%= product.brand %></p>
                                    </div>

                                    <!-- Price Display -->
                                    <div class="flex items-center justify-between mb-4">
                                        <div class="flex items-center gap-2">
                                            <span class="text-2xl font-light">₹<%= product.salePrice %></span>
                                            <span class="text-sm text-gray-400 line-through">₹<%= product.regularPrice %></span>
                                        </div>
                                        <div class="flex items-center">
                                            <span class="text-sm bg-gray-100 px-2 py-1 rounded"><%= product.rating %> ★</span>
                                        </div>
                                    </div>

                                    <!-- Stock Status -->
                                    <p class="text-sm text-gray-500 mb-4">Available: <%= product.quantity %></p>

                                    <!-- Wishlist Button -->
                                    <button 
                                    data-product-id="<%= product._id %>" 
                                    class="w-full bg-black hover:bg-gray-900 text-white py-3 rounded-lg transition-colors duration-300 flex items-center justify-center gap-2 wishlist-button">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                                    </svg>
                                    <span>Add to Wishlist</span>
                                </button>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="col-span-full text-center py-12">
                            <p class="text-gray-500">No products available in this collection.</p>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js"></script>

    <script>
       
       document.addEventListener('DOMContentLoaded', function() {
    const wishlistButtons = document.querySelectorAll('button[data-product-id]');

    wishlistButtons.forEach(button => {
        button.addEventListener('click', function() {
            const productId = button.getAttribute('data-product-id');
            const isInWishlist = button.querySelector('span').textContent === 'In Wishlist';

            if (isInWishlist) {
                removeFromWishlist(productId, button);
            } else {
                addToWishlist(productId, button);
            }
        });
    });

    async function addToWishlist(productId, button) {
        try {
            button.classList.add('opacity-50', 'cursor-not-allowed');
            button.querySelector('span').textContent = 'Adding...';

            const response = await fetch('/wishlist/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId }),
                credentials: 'same-origin'
            });

            if (!response.ok) {
                throw new Error('Failed to add to wishlist');
            }

            const data = await response.json();

            button.classList.remove('bg-black', 'hover:bg-gray-900', 'opacity-50', 'cursor-not-allowed');
            button.classList.add('bg-green-600', 'hover:bg-green-700', 'text-white');
            button.querySelector('span').textContent = 'In Wishlist';

            Swal.fire({
                icon: 'success',
                title: 'Added to Wishlist',
                text: data.message,
                showConfirmButton: false,
                timer: 1500,
                customClass: {
                    popup: 'animate__animated animate__fadeIn'
                }
            });
        } catch (error) {
            console.error('Error:', error);
            button.classList.remove('opacity-50', 'cursor-not-allowed');
            button.querySelector('span').textContent = 'Add to Wishlist';

            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to add to wishlist. Please try again.',
            });
        }
    }

    async function removeFromWishlist(productId, button) {
        try {
            button.classList.add('opacity-50', 'cursor-not-allowed');
            button.querySelector('span').textContent = 'Removing...';

            const response = await fetch(`/wishlist/remove/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'same-origin'
            });

            if (!response.ok) {
                throw new Error('Failed to remove from wishlist');
            }

            button.classList.remove('bg-green-600', 'hover:bg-green-700', 'text-white', 'opacity-50', 'cursor-not-allowed');
            button.classList.add('bg-black', 'hover:bg-gray-900');
            button.querySelector('span').textContent = 'Add to Wishlist';

            Swal.fire({
                icon: 'success',
                title: 'Removed',
                text: 'Product removed from wishlist',
                showConfirmButton: false,
                timer: 1500,
                customClass: {
                    popup: 'animate__animated animate__fadeIn'
                }
            });
        } catch (error) {
            console.error('Error:', error);
            button.classList.remove('opacity-50', 'cursor-not-allowed');
            button.querySelector('span').textContent = 'In Wishlist';

            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to remove from wishlist. Please try again.',
            });
        }
    }
});

// Get the price filter select element
const priceFilterSelect = document.getElementById('priceFilter');

// Add an event listener to the select element
priceFilterSelect.addEventListener('change', (event) => {
  // Get the selected sorting option
  const selectedSort = event.target.value;

  // Construct the URL with the selected sorting option
  const currentUrl = new URL(window.location.href);
  const searchParams = new URLSearchParams(currentUrl.search);
  searchParams.set('sort', selectedSort);

  // Update the URL and reload the page
  currentUrl.search = searchParams.toString();
  window.location.href = currentUrl.toString();
});


document.addEventListener('DOMContentLoaded', function() {
            const categoryToggle = document.querySelector('.category-toggle');
            const categoryList = document.querySelector('.category-list');

            if (categoryToggle && categoryList) {
                categoryToggle.addEventListener('click', function() {
                    categoryToggle.classList.toggle('active');
                    categoryList.classList.toggle('show');
                    
                    // Add smooth animation
                    if (categoryList.classList.contains('show')) {
                        categoryList.style.maxHeight = categoryList.scrollHeight + "px";
                    } else {
                        categoryList.style.maxHeight = null;
                    }
                });

                // Close categories when clicking outside
                document.addEventListener('click', function(event) {
                    const isClickInside = categoryToggle.contains(event.target) || categoryList.contains(event.target);
                    
                    if (!isClickInside && window.innerWidth < 768 && categoryList.classList.contains('show')) {
                        categoryToggle.classList.remove('active');
                        categoryList.classList.remove('show');
                        categoryList.style.maxHeight = null;
                    }
                });
            }
        });

    </script>
</body>
</html>

<%- include("../partials/user/footer") %>