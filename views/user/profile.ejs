
<%- include("../partials/user/header") %>

    
    





<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile - E-commerce</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/2.3.0/alpine-ie11.min.js" defer></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        body {
            font-family: 'Poppins', sans-serif;
        }
        .transition-transform { transition: transform 0.3s ease-in-out; }
        .hover-scale:hover { transform: scale(1.05); }
        [x-cloak] { display: none !important; }
    </style>
</head>
<body class="bg-gray-100">
 
    
    <div class="container mx-auto px-4 py-8 max-w-7xl" x-data="{ activeSection: 'profile' }">
        <nav aria-label="breadcrumb" class="mb-8">
            <ol class="flex items-center space-x-2 text-gray-600">
                <li><a href="/" class="hover:text-blue-600">Home</a></li>
                <li><span class="mx-2">/</span></li>
                <li><a href="/profile" class="hover:text-blue-600">Profile</a></li>
            </ol>
        </nav>

        <div class="flex flex-col md:flex-row gap-8">
            <!-- Left Sidebar -->
            <div class="w-full md:w-1/4">
                <div class="bg-white shadow-lg rounded-lg overflow-hidden">
                    <div class="p-6">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-6">My Account</h2>
                        <ul class="space-y-2">
                            <li>
                                <a @click="activeSection = 'profile'" class="block py-2 px-4 rounded transition-colors duration-200" :class="{ 'bg-blue-500 text-white': activeSection === 'profile', 'hover:bg-gray-100': activeSection !== 'profile' }">
                                    <i class="fas fa-user mr-2"></i> User Profile
                                </a>
                            </li>
                            <li>
                                <a @click="activeSection = 'addresses'" class="block py-2 px-4 rounded transition-colors duration-200" :class="{ 'bg-blue-500 text-white': activeSection === 'addresses', 'hover:bg-gray-100': activeSection !== 'addresses' }">
                                    <i class="fas fa-map-marker-alt mr-2"></i> Address Book
                                </a>
                            </li>
                            <li>
                                <a @click="activeSection = 'orders'" class="block py-2 px-4 rounded transition-colors duration-200" :class="{ 'bg-blue-500 text-white': activeSection === 'orders', 'hover:bg-gray-100': activeSection !== 'orders' }">
                                    <i class="fas fa-shopping-bag mr-2"></i> Orders
                                </a>
                            </li>
                            <li>
                                <a @click="activeSection = 'wallet'" class="block py-2 px-4 rounded transition-colors duration-200" :class="{ 'bg-blue-500 text-white': activeSection === 'wallet', 'hover:bg-gray-100': activeSection !== 'wallet' }">
                                    <i class="fas fa-wallet mr-2"></i> Wallet
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Right Content Area -->
            <div class="w-full md:w-3/4">
                <!-- User Profile Section -->
                <div x-show="activeSection === 'profile'" x-cloak class="bg-white shadow-lg rounded-lg overflow-hidden">
                    <div class="p-6">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Personal Information</h2>
                        <div x-data="{ editMode: false }">
                            <div class="flex justify-end mb-4">
                                <button @click="editMode = !editMode" class="text-blue-500 hover:text-blue-600 focus:outline-none transition-colors duration-300">
                                    <i class="fas" :class="editMode ? 'fa-times' : 'fa-edit'"></i>
                                    <span x-text="editMode ? 'Cancel' : 'Edit'"></span>
                                </button>
                            </div>
                            <div x-show="!editMode">
                                <div class="grid grid-cols-2 gap-4 mb-4">
                                    <div>
                                        <p class="text-sm text-gray-600">Full Name</p>
                                        <p class="font-medium text-gray-800"><%= user.name %></p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-gray-600">Email</p>
                                        <p class="font-medium text-gray-800"><%= user.email %></p>
                                    </div>
                                    <div>
                                        <p class="text-sm text-gray-600">Phone</p>
                                        <p class="font-medium text-gray-800"><%= user.phone %></p>
                                    </div>
                                </div>
                            </div>
                            <div x-show="editMode" x-cloak>
                                <form class="grid grid-cols-2 gap-4" action="/update-profile" method="POST">
                                    <div>
                                        <label for="name" class="block text-sm font-medium text-gray-700">Full Name</label>
                                        <input type="text" id="name" name="name" value="<%= user.name %>" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                    </div>
                                    <div>
                                        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
                                        <input type="email" id="email" name="email" value="<%= user.email %>" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                    </div>
                                    <div>
                                        <label for="phone" class="block text-sm font-medium text-gray-700">Phone</label>
                                        <input type="tel" id="phone" name="phone" value="<%= user.phone %>" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                    </div>
                                    <div class="col-span-2 mt-4">
                                        <button type="submit" class="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors duration-300">Save Changes</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Address Book Section -->
                <div x-show="activeSection === 'addresses'" x-cloak class="bg-white shadow-lg rounded-lg overflow-hidden">
                    <div class="p-6">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Address Book</h2>
                        <!-- Existing Addresses -->
                        <div class="space-y-4 mb-8">
                            <% addresses.forEach(function(userAddress) { %>
                                <% userAddress.address.forEach(function(address) { %>
                                    <div class="border p-4 rounded">
                                        <h3 class="font-semibold"><%= address.addressType || 'Default Type' %></h3>
                                        <h2 class="font-semibold"><%= address.name || 'Name not provided' %></h2>
                                        <p><%= address.street || 'Street not provided' %></p>
                                        <p><%= address.phone %></p>
                                        <p><%= address.city || 'City not provided' %>, <%= address.state || 'State not provided' %>, <%= address.pincode || 'Zip not provided' %></p>
                                        <div class="mt-2">
                                            <button class="text-blue-500 hover:underline mr-2" onclick="editAddress('<%= address._id %>')">Edit</button>
                                            <button class="text-red-500 hover:underline" onclick="deleteAddress('<%= address._id %>')">Delete</button>
                                        </div>
                                    </div>
                                <% }); %>
                            <% }); %>
                        </div>
                        <!-- Add New Address Form -->
                        <form class="mt-6" id="addAddressForm" action="/addAddress" method="POST">
                            <h3 class="text-lg font-semibold mb-4">Add New Address</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                                    <input type="text" id="name" name="name" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" required>
                                    <span id="NameError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="type" class="block text-sm font-medium text-gray-700 mb-1">Type</label>
                                    <select id="type" name="addressType" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" required>
                                        <option value="Home">Home</option>
                                        <option value="Work">Work</option>
                                    </select>
                                </div>
                                <div>
                                    <label for="street" class="block text-sm font-medium text-gray-700 mb-1">Street</label>
                                    <input type="text" id="street" name="street" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" required>
                                    <span id="StreetError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="landMark" class="block text-sm font-medium text-gray-700 mb-1">Landmark</label>
                                    <input type="text" id="landMark" name="landMark" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" required>
                                    <span id="LandMarkError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="city" class="block text-sm font-medium text-gray-700 mb-1">City</label>
                                    <input type="text" id="city" name="city" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" required>
                                    <span id="CityError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="state" class="block text-sm font-medium text-gray-700 mb-1">State</label>
                                    <input type="text" id="state" name="state" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" required>
                                    <span id="StateError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                                    <input type="text" id="phone" name="phone" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" required>
                                    <span id="PhoneError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="pincode" class="block text-sm font-medium text-gray-700 mb-1">Pincode</label>
                                    <input type="text" id="pincode" name="pincode" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" required>
                                    <span id="PincodeError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="altPhone" class="block text-sm font-medium text-gray-700 mb-1">Alternate Phone</label>
                                    <input type="text" id="altPhone" name="altPhone" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                    <span id="AltPhoneError" class="text-red-500 text-sm"></span>
                                </div>
                            </div>
                            <button type="submit" class="w-full bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition-colors duration-300">
                                Add Address
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Orders Section -->
                <div x-show="activeSection === 'orders'" x-cloak class="bg-white shadow-lg rounded-lg overflow-hidden">
                    <div class="p-6">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Your Orders</h2>
                        <div class="space-y-6">
                            <% if (orders && orders.length > 0) { %>
                                <% orders.forEach(function(order) { %>
                                    <div class="border p-6 rounded-lg shadow-sm">
                                        <div class="flex justify-between items-center mb-4">
                                            <h3 class="text-lg font-semibold">Order ID: <%= order._id %></h3>
                                            <span class="px-3 py-1 text-sm font-medium rounded-full 
                                                <%= order.status === 'Pending' ? 'bg-yellow-100 text-yellow-800' : 
                                                   order.status === 'Completed' ? 'bg-green-100 text-green-800' : 
                                                   'bg-gray-100 text-gray-800' %>">
                                                <%= order.status %>
                                            </span>
                                        </div>
                                        <p class="text-sm text-gray-600 mb-2">Order Date: <%= helpers.formatDate(order.createdOn) %></p>
                                        <p class="text-sm text-gray-600 mb-4">Payment Method: <%= order.paymentMethod %></p>
                
                                        <div class="mb-4">
                                            <h4 class="font-medium mb-2">Ordered Items:</h4>
                                            <ul class="list-disc pl-5">
                                                <% order.orderedItems.forEach(function(item) { %>
                                                    <li class="text-sm">
                                                        <%= item.product.productName %> - Quantity: <%= item.quantity %>, 
                                                        Price: ₹<%= item.price.toFixed(2) %>
                                                    </li>
                                                <% }); %>
                                            </ul>
                                        </div>
                
                                        <div class="mb-4">
                                            <h4 class="font-medium mb-2">Shipping Address:</h4>
                                            <p class="text-sm">
                                                <%= order.address.name %><br>
                                                <%= order.address.addressType %><br>
                                                <%= order.address.street %>
                                                <%= order.address.city %>, <%= order.address.state %> <%= order.address.pincode %><br>
                                                <%= order.address.phone %>
                                            </p>
                                        </div>
                
                                        <div class="flex justify-between items-center pt-4 border-t">
                                            <span class="font-medium">Total Amount:</span>
                                            <span class="text-lg font-semibold">$<%= order.finalAmount.toFixed(2) %></span>
                                        </div>
                
                                        <% if (order.status === 'Pending') { %>
                                            <div class="mt-4">
                                                <button onclick="cancelOrder('<%= order._id %>')" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded">
                                                    Cancel Order
                                                </button>
                                            </div>
                                        <% } %>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <p class="text-center text-gray-500">No orders found.</p>
                            <% } %>
                        </div>
                    </div>
                </div>

                <!-- Wallet Section -->
                <div x-show="activeSection === 'wallet'" x-cloak class="bg-white shadow-lg rounded-lg overflow-hidden">
                    <div class="p-6">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Your Wallet</h2>
                        <!-- Add wallet information and functionality here -->
                        <p class="text-gray-600">Wallet functionality coming soon!</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Address Modal -->
    
    <div id="editAddressModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 overflow-auto" style="display:none;">
        <div class="bg-white p-6 rounded-lg w-full max-w-md max-h-full overflow-y-auto">
            <div id="updateSuccessMessage" class="text-green-500 mb-4"></div>
            <div id="updateErrorMessage" class="text-red-500 mb-4"></div>
            <form id="editAddressForm">
                <input type="hidden" name="id" id="editAddressId" />
                <div class="mb-4">
                    <label for="editAddressName" class="block">Full Name</label>
                    <input type="text" name="name" id="editAddressName" placeholder="Full Name" class="w-full p-2 border rounded" required />
                    <span id="editNameError" class="text-red-500 text-sm"></span>
                </div>
                <div>
                    <label for="editAddressType" class="block text-sm font-medium text-gray-700 mb-1">Type</label>
                    <select id="editAddressType" name="addressType" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" required>
                        <option value="Home">Home</option>
                        <option value="Work">Work</option>
                    </select>
                </div>
                <div class="mb-4">
                    <label for="editAddressStreet" class="block">Street</label>
                    <input type="text" name="street" id="editAddressStreet" placeholder="Street" class="w-full p-2 border rounded" required />
                    <span id="editStreetError" class="text-red-500 text-sm"></span>
                </div>
                <div class="mb-4">
                    <label for="editAddressLandMark" class="block">Landmark</label>
                    <input type="text" name="landMark" id="editAddressLandMark" placeholder="Landmark" class="w-full p-2 border rounded" required />
                    <span id="editLandMarkError" class="text-red-500 text-sm"></span>
                </div>
                <div class="mb-4">
                    <label for="editAddressCity" class="block">City</label>
                    <input type="text" name="city" id="editAddressCity" placeholder="City" class="w-full p-2 border rounded" required />
                    <span id="editCityError" class="text-red-500 text-sm"></span>
                </div>
                <div class="mb-4">
                    <label for="editAddressState" class="block">State</label>
                    <input type="text" name="state" id="editAddressState" placeholder="State" class="w-full p-2 border rounded" required />
                    <span id="editStateError" class="text-red-500 text-sm"></span>
                </div>
                <div class="mb-4">
                    <label for="editAddressPincode" class="block">Pincode</label>
                    <input type="text" name="pincode" id="editAddressPincode" placeholder="Pincode" class="w-full p-2 border rounded" required />
                    <span id="editPincodeError" class="text-red-500 text-sm"></span>
                </div>
                <div class="mb-4">
                    <label for="editAddressPhone" class="block">Phone</label>
                    <input type="text" name="phone" id="editAddressPhone" placeholder="Phone" class="w-full p-2 border rounded" required />
                    <span id="editPhoneError" class="text-red-500 text-sm"></span>
                </div>
                <div class="mb-4">
                    <label for="editAddressAltPhone" class="block">Alternate Phone</label>
                    <input type="text" name="altPhone" id="editAddressAltPhone" placeholder="Alternate Phone" class="w-full p-2 border rounded" />
                    <span id="editAltPhoneError" class="text-red-500 text-sm"></span>
                </div>
                <div class="mt-4 flex justify-between">
                    <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 transition-colors duration-300">Save</button>
                    <button type="button" onclick="closeModal()" class="bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600 transition-colors duration-300">Cancel</button>
                </div>
                </form>
                </div>
                </div>
        
        
    

  

    <script>
    
        // Function to delete the address
        async function deleteAddress(id) {
            const confirmation = confirm("Are you sure you want to delete this address?");
            if (confirmation) {
                try {
                    const response = await fetch(`/addresses/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const data = await response.json();
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert(data.error);
                    }
                } catch (error) {
                    console.error("Error deleting address:", error);
                    alert('An error occurred while deleting the address.');
                }
            }
        }
        
        async function editAddress(id) {
    try {
        const response = await fetch(`/addresses/${id}`);
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || 'Failed to fetch address details');
        }

        const address = data.address;
        if (!address) {
            throw new Error('Address data is missing or undefined');
        }

        document.getElementById('editAddressId').value = id;
        document.getElementById('editAddressName').value = address.name || '';
        document.getElementById('editAddressType').value = address.addressType || '';
        document.getElementById('editAddressStreet').value = address.street || '';
        document.getElementById('editAddressCity').value = address.city || '';
        document.getElementById('editAddressLandMark').value = address.landMark || '';
        document.getElementById('editAddressState').value = address.state || '';
        document.getElementById('editAddressPincode').value = address.pincode || '';
        document.getElementById('editAddressPhone').value = address.phone || '';
        document.getElementById('editAddressAltPhone').value = address.altPhone || '';

        // Clear any existing error messages
        const errorElements = document.querySelectorAll('#editAddressModal .text-red-500');
        errorElements.forEach(el => el.innerText = '');

        document.getElementById('editAddressModal').style.display = 'flex';
    } catch (error) {
        console.error('Error in editAddress function:', error);
        alert(`An error occurred while fetching address details: ${error.message}`);
    }
}
        function logModalValues() {
            console.log('Modal values:');
            console.log('name', document.getElementById('editAddressName').value);
            console.log('Type:', document.getElementById('editAddressType').value);
            console.log('Street:', document.getElementById('editAddressStreet').value);
            console.log('City:', document.getElementById('editAddressCity').value);
            console.log('Landmark:', document.getElementById('editAddressLandMark').value);
            console.log('State:', document.getElementById('editAddressState').value);
            console.log('Pincode:', document.getElementById('editAddressPincode').value);
            console.log('Phone:', document.getElementById('editAddressPhone').value);
            console.log('Alt Phone:', document.getElementById('editAddressAltPhone').value);
        }
        
        document.getElementById('editAddressForm').onsubmit = async function (event) {
            event.preventDefault(); // Prevent the default form submission
            const id = document.getElementById('editAddressId').value; // Get ID from a hidden input in the form
        
            // Call the editAddress function with the extracted ID
            await editAddress(id); 
        };
        document.getElementById('editAddressForm').onsubmit = async function (event) {
            event.preventDefault(); // Prevent the default form submission
            const id = document.getElementById('editAddressId').value; // Get ID from a hidden input in the form
        
            // Call the updateAddress function with the form data
            await updateAddress(id); 
        };
        
        // Utility function to validate input fields
// Utility function to validate input fields
function validateField(value, regex, errorElement, errorMessage) {
    if (!regex.test(value)) {
        errorElement.innerText = errorMessage;
        return false;
    }
    errorElement.innerText = '';
    return true;
}

// Utility function to validate required fields
function validateRequired(value, errorElement, fieldName) {
    if (!value.trim()) {
        errorElement.innerText = `${fieldName} is required.`;
        return false;
    }
    errorElement.innerText = '';
    return true;
}

// Regex patterns for validation
const patterns = {
    name: /^[A-Za-z\s.,'&@-]{2,50}$/,
    phone: /^[6-9]\d{9}$/,
    pincode: /^\d{6}$/,
    street: /^[A-Za-z0-9\s.,'&@-]{5,100}$/,
    landMark: /^[A-Za-z0-9\s.,'&@-]{3,50}$/,
    city: /^[A-Za-z\s.,'&@-]{2,30}$/,
    state: /^[A-Za-z\s.,'&@-]{2,30}$/
};

// Function to validate all fields in a form
function validateAddressForm(formId, errorPrefix = '') {
    const form = document.getElementById(formId);
    let isValid = true;

    // Validate Name
    isValid = validateRequired(form.name.value, document.getElementById(`${errorPrefix}NameError`), 'Name') && isValid;
    isValid = validateField(form.name.value, patterns.name, document.getElementById(`${errorPrefix}NameError`), 'Please enter a valid name (2-50 characters)') && isValid;

    // Validate Street
    isValid = validateRequired(form.street.value, document.getElementById(`${errorPrefix}StreetError`), 'Street') && isValid;
    isValid = validateField(form.street.value, patterns.street, document.getElementById(`${errorPrefix}StreetError`), 'Please enter a valid street address (5-100 characters)') && isValid;

    // Validate Landmark
    isValid = validateRequired(form.landMark.value, document.getElementById(`${errorPrefix}LandMarkError`), 'Landmark') && isValid;
    isValid = validateField(form.landMark.value, patterns.landMark, document.getElementById(`${errorPrefix}LandMarkError`), 'Please enter a valid landmark (3-50 characters)') && isValid;

    // Validate City
    isValid = validateRequired(form.city.value, document.getElementById(`${errorPrefix}CityError`), 'City') && isValid;
    isValid = validateField(form.city.value, patterns.city, document.getElementById(`${errorPrefix}CityError`), 'Please enter a valid city name (2-30 characters)') && isValid;

    // Validate State
    isValid = validateRequired(form.state.value, document.getElementById(`${errorPrefix}StateError`), 'State') && isValid;
    isValid = validateField(form.state.value, patterns.state, document.getElementById(`${errorPrefix}StateError`), 'Please enter a valid state name (2-30 characters)') && isValid;

    // Validate Phone
    isValid = validateRequired(form.phone.value, document.getElementById(`${errorPrefix}PhoneError`), 'Phone') && isValid;
    isValid = validateField(form.phone.value, patterns.phone, document.getElementById(`${errorPrefix}PhoneError`), 'Please enter a valid 10-digit phone number') && isValid;

    // Validate Pincode
    isValid = validateRequired(form.pincode.value, document.getElementById(`${errorPrefix}PincodeError`), 'Pincode') && isValid;
    isValid = validateField(form.pincode.value, patterns.pincode, document.getElementById(`${errorPrefix}PincodeError`), 'Please enter a valid 6-digit pincode') && isValid;

    // Validate Alternate Phone (if provided)
    if (form.altPhone.value) {
        isValid = validateField(form.altPhone.value, patterns.phone, document.getElementById(`${errorPrefix}AltPhoneError`), 'Please enter a valid 10-digit alternate phone number') && isValid;
    } else {
        document.getElementById(`${errorPrefix}AltPhoneError`).innerText = '';
    }

    return isValid;
}

// Validation for Add New Address form
document.getElementById('addAddressForm').addEventListener('submit', function(event) {
    event.preventDefault();
    if (validateAddressForm('addAddressForm')) {
        this.submit();
    }
});

// Validation for Edit Address form
document.getElementById('editAddressForm').addEventListener('submit', function(event) {
    event.preventDefault();
    if (validateAddressForm('editAddressForm', 'edit')) {
        updateAddress(this.id.value);
    }
});

// Function to update address
async function updateAddress(id) {
    if (!validateAddressForm('editAddressForm', 'edit')) {
        return; // Stop the function if validation fails
    }

    const form = document.getElementById('editAddressForm');
    const addressData = {
        name: form.name.value,
        addressType: form.addressType.value,
        street: form.street.value,
        city: form.city.value,
        landMark: form.landMark.value,
        state: form.state.value,
        pincode: form.pincode.value,
        phone: form.phone.value,
        altPhone: form.altPhone.value,
    };

    try {
        const response = await fetch(`/addresses/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(addressData),
        });

        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || 'Failed to update address');
        }

        console.log('Address updated successfully:', data);
        document.getElementById('updateSuccessMessage').innerText = 'Address updated successfully!';
        setTimeout(() => {
            location.reload();
        }, 2000);
    } catch (error) {
        console.error('Error updating address:', error);
        document.getElementById('updateErrorMessage').innerText = `An error occurred while updating the address: ${error.message}`;
    }
}

// Add input event listeners for real-time validation
function addInputListeners(formId, errorPrefix = '') {
    const form = document.getElementById(formId);
    const fields = ['name', 'street', 'landMark', 'city', 'state', 'phone', 'pincode', 'altPhone'];

    fields.forEach(field => {
        form[field].addEventListener('input', function() {
            if (this.value.trim()) {
                validateField(this.value, patterns[field], document.getElementById(`${errorPrefix}${field.charAt(0).toUpperCase() + field.slice(1)}Error`), `Please enter a valid ${field}`);
            } else {
                document.getElementById(`${errorPrefix}${field.charAt(0).toUpperCase() + field.slice(1)}Error`).innerText = '';
            }
        });
    });
}

// Add input listeners to both forms
addInputListeners('addAddressForm');
addInputListeners('editAddressForm', 'edit');
        // Function to close the modal
        function closeModal() {
    document.getElementById('editAddressModal').style.display = 'none';
    document.getElementById('editAddressForm').reset();
    const errorElements = document.querySelectorAll('#editAddressModal .text-red-500');
    errorElements.forEach(el => el.innerText = '');
    document.getElementById('updateSuccessMessage').innerText = '';
    document.getElementById('updateErrorMessage').innerText = '';
}
        // Event listener for opening the modal
        document.querySelectorAll('.edit-address-button').forEach(button => {
            button.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                editAddress(id);
            });
        });
         // Check the URL for the update success parameter
         const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('update') === 'success') {
                alert('Profile updated successfully!');
            } else if (urlParams.get('update') === 'error') {
                alert('An error occurred while updating the profile.');
            }
        
        
        
        //cancel order 
        
        function cancelOrder(orderId) {
            if (confirm('Are you sure you want to cancel this order?')) {
                fetch(`/orders/${orderId}/cancel`, { method: 'POST' })
                    .then(response => response.json())
                    .then(data => {
                        if (data.message === 'Order cancelled successfully') {
                            alert('Order cancelled successfully');
                            location.reload(); // Refresh the page to reflect the changes
                        } else {
                            alert('Failed to cancel order: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while cancelling the order');
                    });
            }
        }


        
        
            </script>
            <%- include("../partials/user/footer") %>
        </body>
        </html>