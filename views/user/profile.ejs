
<%- include("../partials/user/header") %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile - Fashion E-commerce</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/alpinejs/2.3.0/alpine-ie11.min.js" defer></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Cormorant+Garamond:wght@400;500;600;700&family=Montserrat:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Montserrat', sans-serif;
            background-color: #F8F7F4;
        }
        
        h1, h2, h3 {
            font-family: 'Cormorant Garamond', serif;
        }
        
        .fashion-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(229, 231, 235, 0.5);
        }
        
        .fashion-gradient {
            background: linear-gradient(135deg, #1a1a1a 0%, #333333 100%);
        }
        
        .fashion-input {
            background: #F8F7F4;
            border: 1px solid #E5E7EB;
            transition: all 0.3s ease;
        }
        
        .fashion-input:focus {
            border-color: #1a1a1a;
            box-shadow: 0 0 0 2px rgba(26, 26, 26, 0.1);
        }
        
        .fashion-button {
            background: #1a1a1a;
            color: white;
            transition: all 0.3s ease;
        }
        
        .fashion-button:hover {
            background: #333333;
            transform: translateY(-2px);
        }

        .modal-open {
            overflow: hidden;
        }

        [x-cloak] { 
            display: none !important; 
        }

        .sidebar-link {
            position: relative;
            transition: all 0.3s ease;
        }

        .sidebar-link::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            width: 0;
            height: 1px;
            background: #1a1a1a;
            transition: width 0.3s ease;
        }

        .sidebar-link:hover::after {
            width: 100%;
        }

        .active-section {
            background: #1a1a1a;
            color: white;
        }
    </style>
</head>
<body class="min-h-screen">
    <div class="container mx-auto px-4 py-12 max-w-7xl" x-data="{ activeSection: 'profile' }">
        <!-- Elegant Breadcrumb -->
        <nav aria-label="breadcrumb" class="mb-12">
            <ol class="flex items-center space-x-2 text-sm text-gray-600">
                <li><a href="/" class="hover:text-black transition-colors">Home</a></li>
                <li><span class="mx-2">/</span></li>
                <li><a href="/profile" class="hover:text-black transition-colors">Profile</a></li>
            </ol>
        </nav>

        <div class="flex flex-col lg:flex-row gap-8">
            <!-- Stylish Sidebar -->
            <div class="w-full lg:w-1/4">
                <div class="fashion-card rounded-xl p-8 sticky top-8">
                    <h2 class="text-3xl font-light mb-8 tracking-wide">ACCOUNT</h2>
                    <ul class="space-y-4">
                        <li>
                            <a @click="activeSection = 'profile'" 
                               class="sidebar-link block py-2 px-4 rounded-lg transition-all duration-300"
                               :class="{ 'active-section': activeSection === 'profile' }">
                                <i class="fas fa-user mr-3"></i> Profile
                            </a>
                        </li>
                        <li>
                            <a @click="activeSection = 'addresses'" 
                               class="sidebar-link block py-2 px-4 rounded-lg transition-all duration-300"
                               :class="{ 'active-section': activeSection === 'addresses' }">
                                <i class="fas fa-map-marker-alt mr-3"></i> Addresses
                            </a>
                        </li>
                        <li>
                            <a @click="activeSection = 'orders'" 
                               class="sidebar-link block py-2 px-4 rounded-lg transition-all duration-300"
                               :class="{ 'active-section': activeSection === 'orders' }">
                                <i class="fas fa-shopping-bag mr-3"></i> Orders
                            </a>
                        </li>
                        <li>
                            <a @click="activeSection = 'wallet'" 
                               class="sidebar-link block py-2 px-4 rounded-lg transition-all duration-300"
                               :class="{ 'active-section': activeSection === 'wallet' }">
                                <i class="fas fa-wallet mr-3"></i> Wallet
                            </a>
                        </li>
                        <li>
                            <a @click="activeSection = 'coupons'" 
                               class="sidebar-link block py-2 px-4 rounded-lg transition-all duration-300"
                               :class="{ 'active-section': activeSection === 'coupons' }">
                                <i class="fas fa-ticket-alt mr-3"></i> Coupons
                            </a>
                        </li>
                    </ul>
                </div>
            </div>

            <!-- Main Content Area -->
            <div class="w-full lg:w-3/4">
                <!-- Profile Section -->
                <div x-show="activeSection === 'profile'" x-cloak 
                     class="fashion-card rounded-xl p-8 transition-all duration-500">
                    <div x-data="{ editMode: false }">
                        <div class="flex justify-between items-center mb-8">
                            <h2 class="text-3xl font-light tracking-wide">Personal Details</h2>
                            <button @click="editMode = !editMode" 
                                    class="fashion-button px-6 py-2 rounded-lg text-sm">
                                <i class="fas" :class="editMode ? 'fa-times' : 'fa-edit'"></i>
                                <span x-text="editMode ? 'Cancel' : 'Edit'"></span>
                            </button>
                        </div>

                        <!-- View Mode -->
                        <div x-show="!editMode" class="grid grid-cols-1 md:grid-cols-2 gap-8">
                            <div class="space-y-2">
                                <p class="text-sm text-gray-500">Full Name</p>
                                <p class="text-lg"><%= user.name %></p>
                            </div>
                            <div class="space-y-2">
                                <p class="text-sm text-gray-500">Email</p>
                                <p class="text-lg"><%= user.email %></p>
                            </div>
                            <div class="space-y-2">
                                <p class="text-sm text-gray-500">Phone</p>
                                <p class="text-lg"><%= user.phone %></p>
                            </div>
                        </div>

                        <!-- Edit Mode -->
                        <div x-show="editMode" x-cloak>
                            <form class="grid grid-cols-1 md:grid-cols-2 gap-8" action="/update-profile" method="POST">
                                <div class="space-y-2">
                                    <label for="name" class="text-sm text-gray-500">Full Name</label>
                                    <input type="text" id="name" name="name" value="<%= user.name %>" 
                                           class="fashion-input w-full p-3 rounded-lg">
                                </div>
                                <div class="space-y-2">
                                    <label for="email" class="text-sm text-gray-500">Email</label>
                                    <input type="email" id="email" name="email" value="<%= user.email %>" 
                                           class="fashion-input w-full p-3 rounded-lg">
                                </div>
                                <div class="space-y-2">
                                    <label for="phone" class="text-sm text-gray-500">Phone</label>
                                    <input type="tel" id="phone" name="phone" value="<%= user.phone %>" 
                                           class="fashion-input w-full p-3 rounded-lg">
                                </div>
                                <div class="col-span-2">
                                    <button type="submit" 
                                            class="fashion-button w-full py-3 rounded-lg mt-4 text-sm uppercase tracking-wider">
                                        Save Changes
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Address Book Section -->
                <div x-show="activeSection === 'addresses'" x-cloak class="bg-white shadow-lg rounded-lg overflow-hidden">
                    <div class="p-6">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Address Book</h2>
                        <!-- Existing Addresses -->
                        <div class="space-y-4 mb-8">
                            <% addresses.forEach(function(userAddress) { %>
                                <% userAddress.address.forEach(function(address) { %>
                                    <div class="border p-4 rounded">
                                        <h3 class="font-semibold"><%= address.addressType || 'Default Type' %></h3>
                                        <h2 class="font-semibold"><%= address.name || 'Name not provided' %></h2>
                                        <p><%= address.street || 'Street not provided' %></p>
                                        <p><%= address.phone %></p>
                                        <p><%= address.city || 'City not provided' %>, <%= address.state || 'State not provided' %>, <%= address.pincode || 'Zip not provided' %></p>
                                        <div class="mt-2">
                                            <button class="text-blue-500 hover:underline mr-2" onclick="editAddress('<%= address._id %>')">Edit</button>
                                            <button class="text-red-500 hover:underline" onclick="deleteAddress('<%= address._id %>')">Delete</button>
                                        </div>
                                    </div>
                                <% }); %>
                            <% }); %>
                        </div>
                        <!-- Add New Address Form -->
                        <form class="mt-6" id="addAddressForm" action="/addAddress" method="POST">
                            <h3 class="text-lg font-semibold mb-4">Add New Address</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div>
                                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
                                    <input type="text" id="name" name="name" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" >
                                    <span id="NameError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="type" class="block text-sm font-medium text-gray-700 mb-1">Type</label>
                                    <select id="type" name="addressType" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" >
                                        <option value="Home">Home</option>
                                        <option value="Work">Work</option>
                                    </select>
                                </div>
                                <div>
                                    <label for="street" class="block text-sm font-medium text-gray-700 mb-1">Street</label>
                                    <input type="text" id="street" name="street" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                    <span id="StreetError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="landMark" class="block text-sm font-medium text-gray-700 mb-1">Landmark</label>
                                    <input type="text" id="landMark" name="landMark" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                    <span id="LandMarkError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="city" class="block text-sm font-medium text-gray-700 mb-1">City</label>
                                    <input type="text" id="city" name="city" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" >
                                    <span id="CityError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="state" class="block text-sm font-medium text-gray-700 mb-1">State</label>
                                    <input type="text" id="state" name="state" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                    <span id="StateError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
                                    <input type="text" id="phone" name="phone" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" >
                                    <span id="PhoneError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="pincode" class="block text-sm font-medium text-gray-700 mb-1">Pincode</label>
                                    <input type="text" id="pincode" name="pincode" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" >
                                    <span id="PincodeError" class="text-red-500 text-sm"></span>
                                </div>
                                <div>
                                    <label for="altPhone" class="block text-sm font-medium text-gray-700 mb-1">Alternate Phone</label>
                                    <input type="text" id="altPhone" name="altPhone" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                    <span id="AltPhoneError" class="text-red-500 text-sm"></span>
                                </div>
                            </div>
                            <button type="submit" class="w-full bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition-colors duration-300">
                                Add Address
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Orders Section -->
                <div x-show="activeSection === 'orders'" x-cloak class="bg-gray-50 min-h-screen py-8 font-['Inter']">
                    <div class="max-w-6xl mx-auto px-4">
                        <div class="bg-white shadow-xl rounded-xl overflow-hidden">
                            <div class="p-8">
                                <h2 class="text-3xl font-light text-gray-800 mb-8 tracking-tight">My Orders</h2>
                                <div class="space-y-8">
                                    <% if (orders && orders.length > 0) { %>
                                        <% orders.forEach(function(order) { %>
                                            <div class="border border-gray-100 p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300">
                                                <!-- Order Header -->
                                                <div class="flex flex-wrap justify-between items-center mb-6">
                                                    <div class="space-y-2">
                                                        <h3 class="text-lg text-gray-700">
                                                            <span class="font-light">Order</span> 
                                                            <span class="font-medium">#<%= order._id %></span>
                                                        </h3>
                                                        <p class="text-sm text-gray-500">
                                                            Placed on <%= helpers.formatDate(order.createdOn) %>
                                                        </p>
                                                    </div>
                                                    <span class="px-4 py-1.5 text-sm font-medium rounded-full 
                                                        <%= order.status === 'Pending' ? 'bg-amber-50 text-amber-700 border border-amber-200' : 
                                                           order.status === 'Completed' ? 'bg-emerald-50 text-emerald-700 border border-emerald-200' : 
                                                           order.status === 'Delivered' ? 'bg-blue-50 text-blue-700 border border-blue-200' :
                                                           'bg-gray-50 text-gray-700 border border-gray-200' %>">
                                                        <%= order.status %>
                                                    </span>
                                                </div>
                
                                                <div class="grid md:grid-cols-2 gap-8">
                                                    <!-- Ordered Items Section -->
                                                    <div>
                                                        <h4 class="text-sm uppercase tracking-wider text-gray-500 mb-4 font-medium">Ordered Items</h4>
                                                        <ul class="space-y-4">
                                                            <% order.orderedItems.forEach(function(item) { %>
                                                                <li class="flex items-start space-x-4">
                                                                    <div class="w-24 h-32 bg-gray-100 rounded-lg flex-shrink-0 overflow-hidden">
                                                                        <img src="<%= item.productImage %>" alt="<%= item.product.productName %>" class="w-full h-full object-cover">
                                                                    </div>
                                                                    <div class="flex-1">
                                                                        <h5 class="font-medium text-gray-800">
                                                                            <%= item.product?.productName || 'Product No Longer Available' %>
                                                                        </h5>
                                                                        <div class="mt-2 space-y-1">
                                                                            <p class="text-sm text-gray-600">Quantity: <%= item.quantity %></p>
                                                                            <p class="text-sm font-medium"><%= helpers.formatCurrency(item.price) %></p>
                                                                        </div>
                                                                    </div>
                                                                </li>
                                                            <% }); %>
                                                        </ul>
                                                    </div>
                
                                                    <!-- Order Details Section -->
                                                    <div>
                                                        <!-- Payment Info -->
                                                        <div class="mb-6">
                                                            <h4 class="text-sm uppercase tracking-wider text-gray-500 mb-2 font-medium">Payment Method</h4>
                                                            <p class="text-sm text-gray-700"><%= order.paymentMethod %></p>
                                                        </div>
                
                                                        <!-- Order Summary -->
                                                        <div class="bg-gray-50 p-6 rounded-lg mb-6">
                                                            <h4 class="text-sm uppercase tracking-wider text-gray-500 mb-4 font-medium">Order Summary</h4>
                                                            <div class="space-y-3">
                                                                <div class="flex justify-between text-sm">
                                                                    <span class="text-gray-600">Subtotal</span>
                                                                    <span class="font-medium"><%= helpers.formatCurrency(order.totalPrice) %></span>
                                                                </div>
                                                                
                                                                <% if (order.deliveryCharge > 0) { %>
                                                                    <div class="flex justify-between text-sm">
                                                                        <span class="text-gray-600">Shipping</span>
                                                                        <span class="font-medium"><%= helpers.formatCurrency(order.deliveryCharge) %></span>
                                                                    </div>
                                                                <% } else { %>
                                                                    <div class="flex justify-between text-sm">
                                                                        <span class="text-gray-600">Shipping</span>
                                                                        <span class="text-emerald-600 font-medium">Free</span>
                                                                    </div>
                                                                <% } %>
                
                                                                <% if (order.coupon && order.coupon.applied) { %>
                                                                    <div class="flex justify-between text-sm">
                                                                        <span class="text-emerald-600">Discount (<%= order.coupon.code %>)</span>
                                                                        <span class="text-emerald-600 font-medium">-<%= helpers.formatCurrency(order.discount) %></span>
                                                                    </div>
                                                                <% } %>
                
                                                                <div class="pt-3 border-t border-gray-200 mt-3">
                                                                    <div class="flex justify-between">
                                                                        <span class="font-semibold">Total</span>
                                                                        <span class="font-semibold"><%= helpers.formatCurrency(order.finalAmount) %></span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                
                                                        <!-- Shipping Address -->
                                                        <div class="mb-6">
                                                            <h4 class="text-sm uppercase tracking-wider text-gray-500 mb-4 font-medium">Shipping Address</h4>
                                                            <address class="text-sm text-gray-600 not-italic">
                                                                <strong class="text-gray-800 block mb-1"><%= order.address.name %></strong>
                                                                <span class="inline-block bg-gray-100 text-gray-700 px-2 py-0.5 text-xs rounded mb-2">
                                                                    <%= order.address.addressType %>
                                                                </span><br>
                                                                <%= order.address.street %><br>
                                                                <%= order.address.city %>, <%= order.address.state %> <%= order.address.pincode %><br>
                                                                <span class="text-gray-700 mt-1 block">📞 <%= order.address.phone %></span>
                                                            </address>
                                                        </div>
                
                                                        <!-- Action Buttons -->
                                                        <div class="flex flex-wrap gap-4">
                                                            <% if (order.status === 'Pending') { %>
                                                                <button onclick="cancelOrder('<%= order._id %>')" 
                                                                    class="flex-1 min-w-[120px] bg-white border border-red-200 text-red-600 hover:bg-red-50 px-6 py-2.5 rounded-lg text-sm font-medium transition-colors duration-200">
                                                                    Cancel Order
                                                                </button>
                                                            <% } %>
                                                            <% if (order.status === 'Delivered') { %>
                                                                <button onclick="showReturnModal('<%= order._id %>')" 
                                                                    class="flex-1 min-w-[120px] bg-white border border-orange-200 text-orange-600 hover:bg-orange-50 px-6 py-2.5 rounded-lg text-sm font-medium transition-colors duration-200">
                                                                    Return Items
                                                                </button>
                                                            <% } %>
                                                            <button onclick="trackOrder('<%= order._id %>')" 
                                                                class="flex-1 min-w-[120px] bg-white border border-blue-200 text-blue-600 hover:bg-blue-50 px-6 py-2.5 rounded-lg text-sm font-medium transition-colors duration-200">
                                                                Track Order
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        <% }); %>
                                    <% } else { %>
                                        <div class="text-center py-16">
                                            <div class="mb-4">
                                                <svg class="w-16 h-16 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                                                </svg>
                                            </div>
                                            <h3 class="text-lg font-medium text-gray-900 mb-2">No orders yet</h3>
                                            <p class="text-gray-500 mb-6">Start exploring our collection to find something you love.</p>
                                            <a href="/shop" class="inline-block bg-black text-white px-6 py-2.5 rounded-lg text-sm font-medium hover:bg-gray-800 transition-colors duration-200">
                                                Browse Collection
                                            </a>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Return Order Modal -->
                <div id="returnOrderModal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 overflow-y-auto">
                    <div class="min-h-screen px-4 text-center">
                        <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                                <div class="sm:flex sm:items-start">
                                    <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                                        <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">
                                            Return Order
                                        </h3>
                                        <form id="returnForm" class="space-y-4">
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                                    Reason for Return
                                                </label>
                                                <select id="returnReason" name="reason" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md">
                                                    <option value="">Select a reason</option>
                                                    <option value="wrong_size">Wrong Size</option>
                                                    <option value="defective">Defective Product</option>
                                                    <option value="not_as_described">Not as Described</option>
                                                    <option value="changed_mind">Changed Mind</option>
                                                </select>
                                            </div>
                                            <div>
                                                <label class="block text-sm font-medium text-gray-700 mb-2">
                                                    Additional Comments
                                                </label>
                                                <textarea id="returnComments" name="comments" rows="3" class="shadow-sm focus:ring-blue-500 focus:border-blue-500 mt-1 block w-full sm:text-sm border border-gray-300 rounded-md"></textarea>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                                <button type="button" onclick="submitReturn()" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-orange-600 text-base font-medium text-white hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 sm:ml-3 sm:w-auto sm:text-sm">
                                    Submit Return
                                </button>
                                <button type="button" onclick="hideReturnModal()" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                    
                        <!-- Return Order Modal (unchanged) -->
                        <div id="returnOrderModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
                            <!-- Modal content remains the same -->
                        </div>
                    </div>
                </div>

                <!-- Wallet Section -->
                <div x-show="activeSection === 'wallet'" x-cloak class="bg-white shadow-lg rounded-lg overflow-hidden">
                    
                    <div class="p-6">
                        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Your Wallet</h2>
                        
                        <!-- Add wallet information and functionality here -->
                        <div class="mb-8">
                            <div class="relative overflow-hidden bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg shadow-lg p-6 cursor-pointer transform transition-transform duration-300 hover:scale-105" style="height: 200px;">
                                <div class="absolute top-0 left-0 w-full h-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" class="absolute bottom-0 left-0">
                                        <path fill="rgba(255,255,255,0.3)" fill-opacity="1" d="M0,32L48,80C96,128,192,224,288,224C384,224,480,128,576,90.7C672,53,768,75,864,96C960,117,1056,139,1152,149.3C1248,160,1344,160,1392,160L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"></path>
                                    </svg>
                                </div>
                                <div class="relative z-10">
                                    <h3 class="text-2xl font-bold mb-2">Wallet Balance</h3>
                                    <p class="text-4xl font-bold" x-data="{ balance: 0 }" x-init="setTimeout(() => balance = <%= wallet.balance %>, 500)" x-text="`₹${balance.toFixed(2)}`"></p>
                                    <h3><%= user.name %></h3>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Add Money to Wallet -->
                        <div class="mb-8">
                            <h3 class="text-lg font-semibold mb-4">Add Money to Wallet</h3>
                            <form id="addMoneyForm" class="flex items-center space-x-4">
                                <% if (typeof user !== 'undefined' && user) { %>
                                    <input type="hidden" id="userId" name="userId" value="<%= user._id %>">
                                <% } else { %>
                                    <p class="text-red-500">Error: User not logged in</p>
                                <% } %>
                                <input type="number" id="addAmount" name="amount" min="1" step="0.01" required 
                                       class="flex-grow rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" 
                                       placeholder="Enter amount">
                                <button type="submit" 
                                        class="bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition-colors duration-300">
                                    Add Money
                                </button>
                            </form>
                        </div>
                        <!-- Transaction History -->
                        <div>
                            <h3 class="text-lg font-semibold mb-4">Transaction History</h3>
                            <div class="overflow-x-auto">
                                <table class="min-w-full bg-white">
                                    <thead class="bg-gray-100">
                                        <tr>
                                            <th class="py-3 px-4 text-left">Date</th>
                                            <th class="py-3 px-4 text-left">Description</th>
                                            <th class="py-3 px-4 text-left">Amount</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% if (wallet.transactionHistory && wallet.transactionHistory.length > 0) { %>
                                            <% wallet.transactionHistory.slice().reverse().forEach(function(transaction) { %>
                                                <tr class="border-b hover:bg-gray-50">
                                                    <td class="py-3 px-4"><%= helpers.formatDate(transaction.date) %></td>
                                                    <td class="py-3 px-4"><%= transaction.description %></td>
                                                    <td class="py-3 px-4 <%= transaction.amount >= 0 ? 'text-green-600' : 'text-red-600' %>">
                                                        <%= transaction.amount >= 0 ? '+' : '-' %>₹<%= Math.abs(transaction.amount).toFixed(2) %>
                                                    </td>
                                                </tr>
                                            <% }); %>
                                        <% } else { %>
                                            <tr>
                                                <td colspan="3" class="py-4 px-4 text-center text-gray-500">No transactions yet.</td>
                                            </tr>
                                        <% } %>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

<!-- coupon section  -->

<div x-show="activeSection === 'coupons'" x-cloak class="bg-white shadow-lg rounded-lg overflow-hidden">
    <div class="p-6">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6">Your Coupon Usage History</h2>
        
    </div>

    <div class="overflow-x-auto">
        <table class="min-w-full bg-white">
            <thead class="bg-gray-100">
                <tr>
                    <th class="py-3 px-4 text-left">Coupon Code</th>
                    <th class="py-3 px-4 text-left">Discount</th>
                    <th class="py-3 px-4 text-left">Used On</th>
                    <th class="py-3 px-4 text-left">Order ID</th>
                </tr>
            </thead>
        </table>
    </div>
</div>





<!-- closing -->

            </div>
        </div>
    </div>

    <!-- Edit Address Modal -->
    
    <div id="editAddressModal" class="fixed inset-0 flex items-center justify-center bg-black/30 backdrop-blur-sm overflow-auto" style="display:none;">
        <div class="bg-white p-8 rounded-xl w-full max-w-xl mx-4 shadow-2xl">
            <!-- Header -->
            <div class="mb-8">
                <h2 class="text-2xl font-light tracking-wide text-gray-900 mb-1">Edit Delivery Address</h2>
                <p class="text-gray-500 text-sm">Please ensure all fields are filled correctly</p>
            </div>
    
            <!-- Alert Messages -->
            <div id="updateSuccessMessage" class="bg-green-50 text-green-700 px-4 py-3 rounded-lg mb-4"></div>
            <div id="updateErrorMessage" class="bg-red-50 text-red-700 px-4 py-3 rounded-lg mb-4"></div>
    
            <form id="editAddressForm" class="space-y-6">
                <input type="hidden" name="id" id="editAddressId" />
                
                <!-- Name and Type Section -->
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="editAddressName" class="block text-xs uppercase tracking-wide text-gray-500 mb-2">Full Name</label>
                        <input type="text" name="name" id="editAddressName" placeholder="Enter your full name" 
                               class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-gray-200 focus:border-gray-400 transition-all" />
                        <span id="editNameError" class="text-red-500 text-xs mt-1"></span>
                    </div>
                    <div>
                        <label for="editAddressType" class="block text-xs uppercase tracking-wide text-gray-500 mb-2">Address Type</label>
                        <select id="editAddressType" name="addressType" 
                                class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-gray-200 focus:border-gray-400 transition-all appearance-none bg-white">
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                        </select>
                    </div>
                </div>
    
                <!-- Street and Landmark -->
                <div class="space-y-4">
                    <div>
                        <label for="editAddressStreet" class="block text-xs uppercase tracking-wide text-gray-500 mb-2">Street Address</label>
                        <input type="text" name="street" id="editAddressStreet" placeholder="Enter street address"
                               class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-gray-200 focus:border-gray-400 transition-all" />
                        <span id="editStreetError" class="text-red-500 text-xs mt-1"></span>
                    </div>
                    <div>
                        <label for="editAddressLandMark" class="block text-xs uppercase tracking-wide text-gray-500 mb-2">Landmark</label>
                        <input type="text" name="landMark" id="editAddressLandMark" placeholder="Enter nearby landmark"
                               class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-gray-200 focus:border-gray-400 transition-all" />
                        <span id="editLandMarkError" class="text-red-500 text-xs mt-1"></span>
                    </div>
                </div>
    
                <!-- City, State, Pincode Grid -->
                <div class="grid grid-cols-3 gap-4">
                    <div>
                        <label for="editAddressCity" class="block text-xs uppercase tracking-wide text-gray-500 mb-2">City</label>
                        <input type="text" name="city" id="editAddressCity" placeholder="City"
                               class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-gray-200 focus:border-gray-400 transition-all" />
                        <span id="editCityError" class="text-red-500 text-xs mt-1"></span>
                    </div>
                    <div>
                        <label for="editAddressState" class="block text-xs uppercase tracking-wide text-gray-500 mb-2">State</label>
                        <input type="text" name="state" id="editAddressState" placeholder="State"
                               class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-gray-200 focus:border-gray-400 transition-all" />
                        <span id="editStateError" class="text-red-500 text-xs mt-1"></span>
                    </div>
                    <div>
                        <label for="editAddressPincode" class="block text-xs uppercase tracking-wide text-gray-500 mb-2">Pincode</label>
                        <input type="text" name="pincode" id="editAddressPincode" placeholder="Pincode"
                               class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-gray-200 focus:border-gray-400 transition-all" />
                        <span id="editPincodeError" class="text-red-500 text-xs mt-1"></span>
                    </div>
                </div>
    
                <!-- Phone Numbers -->
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="editAddressPhone" class="block text-xs uppercase tracking-wide text-gray-500 mb-2">Phone Number</label>
                        <input type="text" name="phone" id="editAddressPhone" placeholder="Primary phone number"
                               class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-gray-200 focus:border-gray-400 transition-all" />
                        <span id="editPhoneError" class="text-red-500 text-xs mt-1"></span>
                    </div>
                    <div>
                        <label for="editAddressAltPhone" class="block text-xs uppercase tracking-wide text-gray-500 mb-2">Alternative Phone</label>
                        <input type="text" name="altPhone" id="editAddressAltPhone" placeholder="Alternative phone number"
                               class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-gray-200 focus:border-gray-400 transition-all" />
                        <span id="editAltPhoneError" class="text-red-500 text-xs mt-1"></span>
                    </div>
                </div>
    
                <!-- Action Buttons -->
                <div class="flex justify-end space-x-4 pt-4 border-t border-gray-100">
                    <button type="button" onclick="closeModal()" 
                            class="px-6 py-3 text-sm font-medium text-gray-600 hover:text-gray-800 transition-colors">
                        Cancel
                    </button>
                    <button type="submit" 
                            class="px-6 py-3 bg-black text-white text-sm font-medium rounded-lg hover:bg-gray-800 transition-colors">
                        Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
        
        
               

               <script>



        // Function to delete the address
        async function deleteAddress(id) {
            const confirmation = confirm("Are you sure you want to delete this address?");
            if (confirmation) {
                try {
                    const response = await fetch(`/addresses/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    const data = await response.json();
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert(data.error);
                    }
                } catch (error) {
                    console.error("Error deleting address:", error);
                    alert('An error occurred while deleting the address.');
                }
            }
        }
        
        async function editAddress(id) {
    try {
        const response = await fetch(`/addresses/${id}`);
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.error || 'Failed to fetch address details');
        }

        const address = data.address;
        if (!address) {
            throw new Error('Address data is missing or undefined');
        }

        document.getElementById('editAddressId').value = id;
        document.getElementById('editAddressName').value = address.name || '';
        document.getElementById('editAddressType').value = address.addressType || '';
        document.getElementById('editAddressStreet').value = address.street || '';
        document.getElementById('editAddressCity').value = address.city || '';
        document.getElementById('editAddressLandMark').value = address.landMark || '';
        document.getElementById('editAddressState').value = address.state || '';
        document.getElementById('editAddressPincode').value = address.pincode || '';
        document.getElementById('editAddressPhone').value = address.phone || '';
        document.getElementById('editAddressAltPhone').value = address.altPhone || '';

        // Clear any existing error messages
        const errorElements = document.querySelectorAll('#editAddressModal .text-red-500');
        errorElements.forEach(el => el.innerText = '');

        document.getElementById('editAddressModal').style.display = 'flex';
    } catch (error) {
        console.error('Error in editAddress function:', error);
        alert(`An error occurred while fetching address details: ${error.message}`);
    }
}
        function logModalValues() {
            console.log('Modal values:');
            console.log('name', document.getElementById('editAddressName').value);
            console.log('Type:', document.getElementById('editAddressType').value);
            console.log('Street:', document.getElementById('editAddressStreet').value);
            console.log('City:', document.getElementById('editAddressCity').value);
            console.log('Landmark:', document.getElementById('editAddressLandMark').value);
            console.log('State:', document.getElementById('editAddressState').value);
            console.log('Pincode:', document.getElementById('editAddressPincode').value);
            console.log('Phone:', document.getElementById('editAddressPhone').value);
            console.log('Alt Phone:', document.getElementById('editAddressAltPhone').value);
        }
        
        // document.getElementById('editAddressForm').onsubmit = async function (event) {
        //     event.preventDefault(); // Prevent the default form submission
        //     const id = document.getElementById('editAddressId').value; // Get ID from a hidden input in the form
        
        //     // Call the editAddress function with the extracted ID
        //     await editAddress(id); 
        // };
        document.getElementById('editAddressForm').onsubmit = async function (event) {
    event.preventDefault(); // Prevent the default form submission
    const id = document.getElementById('editAddressId').value; // Get ID from a hidden input in the form

    // Validate the form before attempting to update
    if (validateAddressForm('editAddressForm', 'edit')) {
        await updateAddress(id); // Only call updateAddress if validation passes
    }
};

       
// Utility function to validate input fields
function validateField(value, regex, errorElement, errorMessage) {
    if (!regex.test(value)) {
        errorElement.innerText = errorMessage;
        return false;
    }
    errorElement.innerText = '';
    return true;
}

// Utility function to validate required fields
function validateRequired(value, errorElement, fieldName) {
    if (!value.trim()) {
        errorElement.innerText = `${fieldName} is required.`;
        return false;
    }
    errorElement.innerText = '';
    return true;
}

// Regex patterns for validation
const patterns = {
    name: /^[A-Za-z\s.,'&@-]{2,50}$/,
    phone: /^[6-9]\d{9}$/,
    pincode: /^\d{6}$/,
    street: /^[A-Za-z0-9\s.,'&@-]{5,100}$/,
    landMark: /^[A-Za-z0-9\s.,'&@-]{3,50}$/,
    city: /^[A-Za-z\s.,'&@-]{2,30}$/,
    state: /^[A-Za-z\s.,'&@-]{2,30}$/
};

// Function to validate all fields in a form
function validateAddressForm(formId, errorPrefix = '') {
    const form = document.getElementById(formId);
    let isValid = true;

    // Validate Name
    isValid = validateRequired(form.name.value, document.getElementById(`${errorPrefix}NameError`), 'Name') && isValid;
    isValid = validateField(form.name.value, patterns.name, document.getElementById(`${errorPrefix}NameError`), 'Please enter a valid name (2-50 characters)') && isValid;

    // Validate Street
    isValid = validateRequired(form.street.value, document.getElementById(`${errorPrefix}StreetError`), 'Street') && isValid;
    isValid = validateField(form.street.value, patterns.street, document.getElementById(`${errorPrefix}StreetError`), 'Please enter a valid street address (5-100 characters)') && isValid;

    // Validate Landmark
    isValid = validateRequired(form.landMark.value, document.getElementById(`${errorPrefix}LandMarkError`), 'Landmark') && isValid;
    isValid = validateField(form.landMark.value, patterns.landMark, document.getElementById(`${errorPrefix}LandMarkError`), 'Please enter a valid landmark (3-50 characters)') && isValid;

    // Validate City
    isValid = validateRequired(form.city.value, document.getElementById(`${errorPrefix}CityError`), 'City') && isValid;
    isValid = validateField(form.city.value, patterns.city, document.getElementById(`${errorPrefix}CityError`), 'Please enter a valid city name (2-30 characters)') && isValid;

    // Validate State
    isValid = validateRequired(form.state.value, document.getElementById(`${errorPrefix}StateError`), 'State') && isValid;
    isValid = validateField(form.state.value, patterns.state, document.getElementById(`${errorPrefix}StateError`), 'Please enter a valid state name (2-30 characters)') && isValid;

    // Validate Phone
    isValid = validateRequired(form.phone.value, document.getElementById(`${errorPrefix}PhoneError`), 'Phone') && isValid;
    isValid = validateField(form.phone.value, patterns.phone, document.getElementById(`${errorPrefix}PhoneError`), 'Please enter a valid 10-digit phone number') && isValid;

    // Validate Pincode
    isValid = validateRequired(form.pincode.value, document.getElementById(`${errorPrefix}PincodeError`), 'Pincode') && isValid;
    isValid = validateField(form.pincode.value, patterns.pincode, document.getElementById(`${errorPrefix}PincodeError`), 'Please enter a valid 6-digit pincode') && isValid;

    // Validate Alternate Phone (if provided)
    if (form.altPhone.value) {
        isValid = validateField(form.altPhone.value, patterns.phone, document.getElementById(`${errorPrefix}AltPhoneError`), 'Please enter a valid 10-digit alternate phone number') && isValid;
    } else {
        document.getElementById(`${errorPrefix}AltPhoneError`).innerText = '';
    }

    return isValid;
}

// Validation for Add New Address form
document.getElementById('addAddressForm').addEventListener('submit', function(event) {
    event.preventDefault();
    if (validateAddressForm('addAddressForm')) {
        this.submit();
    }
});

// Validation for Edit Address form
document.getElementById('editAddressForm').addEventListener('submit', function(event) {
    event.preventDefault();
    if (validateAddressForm('editAddressForm', 'edit')) {
        updateAddress(this.id.value);
    }
});

// Function to update address
async function updateAddress(id) {
    if (!validateAddressForm('editAddressForm', 'edit')) {
        return; // Stop the function if validation fails
    }

    const form = document.getElementById('editAddressForm');
    const addressData = {
        name: form.name.value,
        addressType: form.addressType.value,
        street: form.street.value,
        city: form.city.value,
        landMark: form.landMark.value,
        state: form.state.value,
        pincode: form.pincode.value,
        phone: form.phone.value,
        altPhone: form.altPhone.value,
    };

    try {
        const response = await fetch(`/addresses/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(addressData),
        });

        if (!response.ok) {
            const data = await response.json(); // Get the error response
            throw new Error(data.error || 'Failed to update address');
        }

        // If successful, you can redirect or update the UI accordingly
        console.log('Address updated successfully:', await response.json());
        document.getElementById('updateSuccessMessage').innerText = 'Address updated successfully!';
        setTimeout(() => {
            closeModal(); // Close the modal
            location.reload(); // Reload the page to see the updated address
        }, 2000);
    } catch (error) {
        console.error('Error updating address:', error);
        document.getElementById('updateErrorMessage').innerText = `An error occurred while updating the address: ${error.message}`;
    }
}


// Add input event listeners for real-time validation
function addInputListeners(formId, errorPrefix = '') {
    const form = document.getElementById(formId);
    const fields = ['name', 'street', 'landMark', 'city', 'state', 'phone', 'pincode', 'altPhone'];

    fields.forEach(field => {
        form[field].addEventListener('input', function() {
            if (this.value.trim()) {
                validateField(this.value, patterns[field], document.getElementById(`${errorPrefix}${field.charAt(0).toUpperCase() + field.slice(1)}Error`), `Please enter a valid ${field}`);
            } else {
                document.getElementById(`${errorPrefix}${field.charAt(0).toUpperCase() + field.slice(1)}Error`).innerText = '';
            }
        });
    });
}

// Add input listeners to both forms
addInputListeners('addAddressForm');
addInputListeners('editAddressForm', 'edit');
        // Function to close the modal
        function closeModal() {
    document.getElementById('editAddressModal').style.display = 'none';
    document.getElementById('editAddressForm').reset();
    const errorElements = document.querySelectorAll('#editAddressModal .text-red-500');
    errorElements.forEach(el => el.innerText = '');
    document.getElementById('updateSuccessMessage').innerText = '';
    document.getElementById('updateErrorMessage').innerText = '';
}
        // Event listener for opening the modal
        document.querySelectorAll('.edit-address-button').forEach(button => {
            button.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                editAddress(id);
            });
        });
         // Check the URL for the update success parameter
         const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('update') === 'success') {
                alert('Profile updated successfully!');
            } else if (urlParams.get('update') === 'error') {
                alert('An error occurred while updating the profile.');
            }
        
        
        
        //cancel order 
        
        function cancelOrder(orderId) {
            if (confirm('Are you sure you want to cancel this order?')) {
                fetch(`/orders/${orderId}/cancel`, { method: 'POST' })
                    .then(response => response.json())
                    .then(data => {
                        if (data.message === 'Order cancelled successfully') {
                            alert('Order cancelled successfully');
                            location.reload(); // Refresh the page to reflect the changes
                        } else {
                            alert('Failed to cancel order: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while cancelling the order');
                    });
            }
        }


        //edit profile

        // Utility function to validate input fields
function validateProfileField(value, regex, errorElement, errorMessage) {
    if (!regex.test(value)) {
        errorElement.textContent = errorMessage;
        return false;
    }
    errorElement.textContent = '';
    return true;
}

// Regex patterns for validation
const profilePatterns = {
    name: /^[A-Za-z\s.,'&@-]{2,50}$/,
    email: /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/,
    phone: /^[6-9]\d{9}$/
};

// Function to validate all fields in the profile form
function validateProfileForm() {
    const form = document.querySelector('form[action="/update-profile"]');
    let isValid = true;

    // Validate Name
    const nameError = document.createElement('span');
    nameError.className = 'text-red-500 text-sm';
    form.name.parentNode.appendChild(nameError);
    isValid = validateProfileField(form.name.value, profilePatterns.name, nameError, 'Please enter a valid name (2-50 characters)') && isValid;

    // Validate Email
    const emailError = document.createElement('span');
    emailError.className = 'text-red-500 text-sm';
    form.email.parentNode.appendChild(emailError);
    isValid = validateProfileField(form.email.value, profilePatterns.email, emailError, 'Please enter a valid email address') && isValid;

    // Validate Phone
    const phoneError = document.createElement('span');
    phoneError.className = 'text-red-500 text-sm';
    form.phone.parentNode.appendChild(phoneError);
    isValid = validateProfileField(form.phone.value, profilePatterns.phone, phoneError, 'Please enter a valid 10-digit phone number') && isValid;

    return isValid;
}

// Add event listener for form submission
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form[action="/update-profile"]');
    if (form) {
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            if (validateProfileForm()) {
                this.submit();
            }
        });

        // Add input event listeners for real-time validation
        ['name', 'email', 'phone'].forEach(field => {
            form[field].addEventListener('input', function() {
                const errorElement = this.parentNode.querySelector('.text-red-500');
                validateProfileField(this.value, profilePatterns[field], errorElement, `Please enter a valid ${field}`);
            });
        });
    }
});
        
          
document.addEventListener('DOMContentLoaded', function() {
    const addMoneyForm = document.getElementById('addMoneyForm');
    if (addMoneyForm) {
        addMoneyForm.addEventListener('submit', function(event) {
            event.preventDefault();
            const amount = document.getElementById('addAmount').value;
            const userIdInput = document.getElementById('userId');

            if (!userIdInput) {
                alert('User ID is missing. Please make sure you are logged in.');
                return;
            }

            const userId = userIdInput.value;

            fetch('/wallet/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    userId: userId,
                    amount: parseFloat(amount) 
                }),
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => { throw err; });
                }
                return response.json();
            })
            .then(data => {
                alert('Money added successfully! New balance: ' + data.balance);
                location.reload(); // Refresh to show updated balance and transactions
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error adding money to wallet: ' + (error.message || 'Unknown error'));
            });
        });
    }
});


function returnOrder(orderId) {
    document.getElementById('returnOrderId').value = orderId;
    document.getElementById('returnOrderModal').classList.remove('hidden');
    document.body.classList.add('modal-open');
}

// Function to close return modal
function closeReturnModal() {
    document.getElementById('returnOrderModal').classList.add('hidden');
    document.body.classList.remove('modal-open');
    document.getElementById('returnOrderForm').reset();
}

// Show/hide other reason textarea based on selection
document.getElementById('returnReason').addEventListener('change', function() {
    const otherReasonContainer = document.getElementById('otherReasonContainer');
    if (this.value === 'other') {
        otherReasonContainer.classList.remove('hidden');
    } else {
        otherReasonContainer.classList.add('hidden');
    }
});

// Handle form submission
document.getElementById('returnOrderForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = {
        orderId: document.getElementById('returnOrderId').value,
        reason: document.getElementById('returnReason').value,
        otherReason: document.getElementById('otherReason').value,
        comments: document.getElementById('returnComments').value
    };

    // Send return request to server
    fetch('/api/orders/return', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Return request submitted successfully');
            closeReturnModal();
            window.location.reload(); // Refresh the page to update order status
        } else {
            alert('Failed to submit return request: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while processing your return request');
    });
});


</script>


    
            <%- include("../partials/user/footer") %>
        </body>
        </html>