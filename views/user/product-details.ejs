<!DOCTYPE html>
<html lang="en">
<head>
    <title>Product Details</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        @import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;600;700&family=Poppins:wght@300;400;500;600;700&display=swap');

        body {
            font-family: 'Poppins', sans-serif;
        }

        h1, h2, h3, h4, h5, h6 {
            font-family: 'Playfair Display', serif;
        }

        .zoom-container {
            position: relative;
            overflow: hidden;
            width: 100%;
            max-width: 600px;
            margin: 0 auto;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .zoom-lens {
            position: absolute;
            border: 2px solid #ffffff;
            width: 150px;
            height: 150px;
            background-color: rgba(255, 255, 255, 0.3);
            cursor: none;
            display: none;
            backdrop-filter: blur(2px);
        }

        .zoom-result {
            position: absolute;
            top: 0;
            right: -400px;
            width: 380px;
            height: 380px;
            border: 2px solid #e5e7eb;
            background-repeat: no-repeat;
            display: none;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .thumbnail {
            transition: all 0.3s ease;
        }

        .thumbnail:hover {
            transform: scale(1.05);
        }

        .thumbnail.active {
            border: 2px solid #3b82f6;
            transform: scale(1.05);
        }

        .product-transition {
            transition: opacity 0.3s ease-in-out;
        }

        /* Custom scrollbar for thumbnail container */
        .thumbnail-container::-webkit-scrollbar {
            height: 6px;
        }

        .thumbnail-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }

        .thumbnail-container::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 3px;
        }

        .thumbnail-container::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }
    </style>
</head>
<body class="bg-gray-50">
    <%- include("../partials/user/header") %>
    
    <section class="product-details py-16">
        <div class="container mx-auto px-4 max-w-7xl">
            <!-- Breadcrumb -->
            <nav aria-label="breadcrumb" class="mb-8">
                <ol class="flex items-center space-x-2 text-gray-600 text-sm">
                    <li><a href="/" class="hover:text-blue-600 transition-colors">Home</a></li>
                    <li><span class="mx-2">›</span></li>
                    <li><a href="/products" class="hover:text-blue-600 transition-colors">Products</a></li>
                    <li><span class="mx-2">›</span></li>
                    <li class="text-gray-800 font-medium"><%= product.productName %></li>
                </ol>
            </nav>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
                <!-- Image Section -->
                <div class="product__details__pic space-y-6">
                    <div class="zoom-container bg-white p-4">
                        <img id="main-image"
                             src="/uploads/product-images/<%= product.productImage[0] %>" 
                             alt="<%= product.productName %>" 
                             class="w-full h-auto object-cover transition-opacity duration-300">
                        <div class="zoom-lens"></div>
                        <div class="zoom-result"></div>
                    </div>
                    
                    <!-- Thumbnails -->
                    <div class="thumbnail-container flex space-x-4 overflow-x-auto pb-4">
                        <% product.productImage.forEach(function(image, index) { %>
                            <img src="/uploads/product-images/<%= image %>" 
                                 class="thumbnail w-24 h-24 object-cover rounded-lg cursor-pointer <%= index === 0 ? 'active' : 'opacity-60' %>" 
                                 onclick="changeImage('/uploads/product-images/<%= image %>', this)" 
                                 alt="<%= product.productName %>">
                        <% }) %>
                    </div>
                </div>

                <!-- Product Details -->
                <div class="product__details__text bg-white p-8 rounded-xl shadow-sm">
                    <h3 class="text-3xl font-bold mb-6 text-gray-900"><%= product.productName %></h3>

                    <!-- Price -->
                    <div class="mb-6 space-y-2">
                        <div class="flex items-baseline">
                            <span class="text-2xl font-bold text-red-600">₹<%= product.salePrice %></span>
                            <span class="text-lg text-gray-400 line-through ml-3">₹<%= product.regularPrice %></span>
                        </div>
                        <% if (product.regularPrice > product.salePrice) { 
                            let discountPercentage = Math.round(((product.regularPrice - product.salePrice) / product.regularPrice) * 100); %>
                            <span class="inline-block bg-green-100 text-green-800 text-sm font-medium px-3 py-1 rounded-full">
                                Save <%= discountPercentage %>%
                            </span>
                        <% } %>
                    </div>

                    <!-- Rating -->
                    <div class="flex items-center mb-6 bg-gray-50 p-3 rounded-lg">
                        <div class="flex">
                            <% for (let i = 1; i <= 5; i++) { %>
                                <svg class="w-5 h-5 <%= i <= product.rating ? 'text-yellow-400' : 'text-gray-300' %>" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                </svg>
                            <% } %>
                        </div>
                        <span class="ml-2 text-gray-600 text-sm">(<%= product.rating %> out of 5)</span>
                    </div>

                    <!-- Description -->
                    <div class="prose prose-sm max-w-none mb-8">
                        <p class="text-gray-600 leading-relaxed"><%= product.description %></p>
                    </div>

                    <!-- Product Info -->
                    <div class="grid grid-cols-2 gap-4 mb-8">
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <p class="text-gray-600 text-sm"><i class="fas fa-tags mr-2"></i>Category</p>
                            <p class="font-medium"><%= product.category.name %></p>
                        </div>
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <p class="text-gray-600 text-sm"><i class="fas fa-copyright mr-2"></i>Brand</p>
                            <p class="font-medium"><%= product.brand %></p>
                        </div>
                        <!-- <div class="bg-gray-50 p-3 rounded-lg">
                            <p class="text-gray-600 text-sm"><i class="fas fa-palette mr-2"></i>Colors</p>
                            <p class="font-medium"><%= product.color.join(', ') %></p>
                        </div> -->
                    </div>

                    <!-- Size Selection -->
                    <div class="mb-8 ">
                        <label for="size-select" class="block text-gray-700 font-medium mb-2">Select Size</label>
                        <select id="size-select" class="w-1/4 border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white">
                            <% if (product.size && product.size.length > 0) { %>
                                <% product.size.forEach(size => { %>
                                    <option value="<%= size %>"><%= size %></option>
                                <% }); %>
                            <% } else { %>
                                <option value="">N/A</option>
                            <% } %>
                        </select>
                    </div>

                    <!-- Quantity -->
                   <div class="mb-8">
    <label for="quantity-input" class="block text-gray-700 font-medium mb-2">Quantity</label>
    <div class="flex items-center w-full max-w-xs">
        <button onclick="updateQuantity(-1)" 
                class="bg-gray-100 text-gray-600 px-4 py-2 rounded-l-lg hover:bg-gray-200 transition-colors">
            −
        </button>
        <input type="number" 
               id="quantity-input" 
               class="border-y border-gray-200 text-center w-20 py-2 focus:outline-none" 
               value="1" 
               min="1"
               data-stock="<%= product.quantity %>"
               data-status="<%= product.status %>"
               readonly>
        <button onclick="updateQuantity(1)" 
                class="bg-gray-100 text-gray-600 px-4 py-2 rounded-r-lg hover:bg-gray-200 transition-colors">
            +
        </button>
    </div>
    <% if (product.quantity <= 5 && product.quantity > 0) { %>
        <p class="text-orange-500 text-sm mt-2">Only <%= product.quantity %> items left in stock!</p>
    <% } else if (product.quantity === 0 || product.status !== "Available") { %>
        <p class="text-red-500 text-sm mt-2">Out of stock</p>
    <% } %>
</div>

                    <!-- Action Buttons -->
                    <div class="flex space-x-4">
                        <button data-product-id="<%= product._id %>" 
                                onclick="addToCart('<%= product._id %>')" 
                                class="flex-grow bg-blue-600 text-white px-6 py-3 rounded-lg shadow-sm hover:bg-blue-700 transition-all duration-200 flex items-center justify-center space-x-2 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                            <i class="fas fa-shopping-cart"></i>
                            <span>Add to Cart</span>
                        </button>
                        
                        <button data-product-id="<%= product._id %>" 
                                class="wishlist-button bg-gray-100 text-gray-700 px-6 py-3 rounded-lg hover:bg-gray-200 transition-all duration-200 flex items-center justify-center space-x-2">
                            <i class="fas fa-heart"></i>
                            <span>Wishlist</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Related Products -->
    <section class="related-products py-16 bg-white">
        <div class="container mx-auto px-4 max-w-7xl">
            <h4 class="text-2xl font-bold mb-8">You May Also Like</h4>
            <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-8">
                <% if (relatedProducts.length > 0) { %>
                    <% relatedProducts.forEach(product => { %>
                        <div class="bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow duration-300">
                            <a href="/productDetails?id=<%= product._id %>" class="block">
                                <div class="relative">
                                    <% const discount = Math.abs(((product.regularPrice - product.salePrice) / product.regularPrice) * 100); %>
                                    <% if (discount > 0) { %>
                                        <div class="absolute top-3 left-3 bg-red-500 text-white text-xs font-medium px-2 py-1 rounded-full">
                                            <%= discount.toFixed(0) %>% OFF
                                        </div>
                                    <% } %>
                                    <img src="/uploads/product-images/<%= product.productImage[0] %>" 
                                         alt="<%= product.productName %>" 
                                         class="w-full h-64 object-cover rounded-t-xl">
                                </div>
                                <div class="p-4">
                                    <h5 class="text-lg font-medium text-gray-900 mb-2"><%= product.productName %></h5>
                                    <p class="text-gray-600 text-sm mb-2">Brand: <%= product.brand %></p>
                                    <div class="flex items-baseline space-x-2 mb-2">
                                        <span class="text-lg font-bold text-gray-900">₹<%= product.salePrice %></span>
                                        <span class="text-sm text-gray-400 line-through">₹<%= product.regularPrice %></span>
                                    </div>
                                    <div class="flex items-center">
                                        <div class="flex">
                                            <% for (let i = 1; i <= 5; i++) { %>
                                                <svg class="w-4 h-4 <%= i <= product.rating ? 'text-yellow-400' : 'text-gray-300' %>" fill="currentColor" viewBox="0 0 20 20">
                                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
                                                </svg>
                                            <% } %>
                                        </div>
                                        <span class="ml-2 text-sm text-gray-600">(<%= product.rating %>)</span>
                                    </div>
                                </div>
                            </a>
                        </div>
                    <% }) %>
                <% } else { %>
                    <p class="text-center col-span-full text-gray-600">No related products available at the moment.</p>
                <% } %>
            </div>
        </div>
    </section>

    <script>
        // Image zoom and thumbnail functionality
        function changeImage(imageSrc, clickedThumbnail) {
            const mainImage = document.getElementById('main-image');
            mainImage.style.opacity = '0';
            
            // Remove active class from all thumbnails
            document.querySelectorAll('.thumbnail').forEach(thumb => {
                thumb.classList.remove('active');
                thumb.classList.add('opacity-60');
            });
            
            // Add active class to clicked thumbnail
            clickedThumbnail.classList.add('active');
            clickedThumbnail.classList.remove('opacity-60');
            
            setTimeout(() => {
                mainImage.src = imageSrc;
                mainImage.style.opacity = '1';
            }, 300);
        }

        // Enhanced zoom functionality
        document.addEventListener('DOMContentLoaded', function() {
            const container = document.querySelector('.zoom-container');
            const img = document.getElementById('main-image');
            const lens = document.querySelector('.zoom-lens');
            const result = document.querySelector('.zoom-result');

            container.addEventListener('mousemove', zoomImage);
            container.addEventListener('mouseenter', showZoom);
            container.addEventListener('mouseleave', hideZoom);

            function showZoom() {
                lens.style.display = 'block';
                result.style.display = 'block';
                result.style.opacity = '0';
                setTimeout(() => {
                    result.style.opacity = '1';
                }, 100);
            }

            function hideZoom() {
                lens.style.display = 'none';
                result.style.display = 'none';
            }

            function zoomImage(e) {
                const pos = getCursorPos(e);
                let x = pos.x - (lens.offsetWidth / 2);
                let y = pos.y - (lens.offsetHeight / 2);

                // Boundary checks
                x = Math.min(Math.max(x, 0), img.width - lens.offsetWidth);
                y = Math.min(Math.max(y, 0), img.height - lens.offsetHeight);

                lens.style.left = x + 'px';
                lens.style.top = y + 'px';

                const cx = result.offsetWidth / lens.offsetWidth;
                const cy = result.offsetHeight / lens.offsetHeight;

                result.style.backgroundImage = `url('${img.src}')`;
                result.style.backgroundSize = `${img.width * cx}px ${img.height * cy}px`;
                result.style.backgroundPosition = `-${x * cx}px -${y * cy}px`;
            }

            function getCursorPos(e) {
                const rect = img.getBoundingClientRect();
                return {
                    x: e.pageX - rect.left - window.pageXOffset,
                    y: e.pageY - rect.top - window.pageYOffset
                };
            }
        });

        // Quantity update with animation
        function updateQuantity(change) {
    const quantityInput = document.getElementById('quantity-input');
    const maxStock = parseInt(quantityInput.getAttribute('data-stock'), 10);
    let currentQuantity = parseInt(quantityInput.value, 10);
    let newQuantity = currentQuantity + change;

    // Ensure quantity does not exceed available stock or fall below 1
    if (newQuantity >= 1 && newQuantity <= maxStock) {
        quantityInput.value = newQuantity;

        // Apply animation for visual feedback
        quantityInput.classList.add('scale-110');
        setTimeout(() => {
            quantityInput.classList.remove('scale-110');
        }, 200);
    }
}


        // Enhanced Add to Cart functionality
        function addToCart(productId) {
    const quantity = document.getElementById('quantity-input').value;
    const size = document.getElementById('size-select').value;

    $.ajax({
        url: '/addToCart',
        method: 'POST',
        data: {
            productId: productId,
            quantity: quantity,
            size: size
        },
        beforeSend: function() {
            Swal.fire({
                title: 'Adding to Cart...',
                html: 'Please wait',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });
        },
        success: function(response) {
            Swal.fire({
                icon: 'success',
                title: 'Added to Cart!',
                text: 'Product added successfully',
                showCancelButton: true,
                confirmButtonText: 'Go to Cart',
                cancelButtonText: 'Continue Shopping',
                customClass: {
                    popup: 'animate__animated animate__fadeInUp'
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    // Redirect to the cart page
                    window.location.href = '/cart';
                } else {
                    // Optionally, you can just reload the page or do nothing
                    location.reload();
                }
            });
        },
        error: function(xhr) {
            let errorMessage = 'Something went wrong! Please try again.';
            
            // Check if there's a specific error message from the server
            if (xhr.responseJSON && xhr.responseJSON.message) {
                errorMessage = xhr.responseJSON.message; // Use the message from the server
            } else if (xhr.status === 401) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Not Logged In',
                    text: 'Please log in to add items to your cart',
                    showConfirmButton: true,
                    confirmButtonText: 'Log In',
                    showCancelButton: true,
                    cancelButtonText: 'Cancel',
                    customClass: {
                        popup: 'animate__animated animate__fadeInDown'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/login';
                    }
                });
                return; // Prevent showing the general error message
            }

            // Show the error message in SweetAlert
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: errorMessage,
            });
        }
    });
}



     

        // Wishlist functionality with enhanced UI feedback
        document.addEventListener('DOMContentLoaded', function() {
            const wishlistButtons = document.querySelectorAll('.wishlist-button');

            wishlistButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const productId = button.getAttribute('data-product-id');
                    const isInWishlist = button.querySelector('span').textContent === 'In Wishlist';
                    
                    if (isInWishlist) {
                        removeFromWishlist(productId, button);
                    } else {
                        addToWishlist(productId, button);
                    }
                });
            });

            async function addToWishlist(productId, button) {
                try {
                    button.classList.add('opacity-50');
                    button.querySelector('span').textContent = 'Adding...';

                    const response = await fetch('/wishlist/add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ productId }),
                        credentials: 'same-origin'
                    });

                    if (!response.ok) {
                        throw new Error('Failed to add to wishlist');
                    }

                    const data = await response.json();
                    
                    button.classList.remove('bg-gray-100', 'opacity-50');
                    button.classList.add('bg-pink-100', 'text-pink-600');
                    button.querySelector('span').textContent = 'In Wishlist';
                    button.querySelector('i').classList.add('text-pink-600');

                    Swal.fire({
                        icon: 'success',
                        title: 'Added to Wishlist',
                        text: data.message,
                        showConfirmButton: false,
                        timer: 1500,
                        customClass: {
                            popup: 'animate__animated animate__fadeIn'
                        }
                    });
                } catch (error) {
                    console.error('Error:', error);
                    button.classList.remove('opacity-50');
                    button.querySelector('span').textContent = 'Wishlist';
                    
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to add to wishlist. Please try again.',
                    });
                }
            }

            async function removeFromWishlist(productId, button) {
                try {
                    button.classList.add('opacity-50');
                    button.querySelector('span').textContent = 'Removing...';

                    const response = await fetch(`/wishlist/remove/${productId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        credentials: 'same-origin'
                    });

                    if (!response.ok) {
                        throw new Error('Failed to remove from wishlist');
                    }

                    button.classList.remove('bg-pink-100', 'text-pink-600', 'opacity-50');
                    button.classList.add('bg-gray-100');
                    button.querySelector('span').textContent = 'Wishlist';
                    button.querySelector('i').classList.remove('text-pink-600');

                    Swal.fire({
                        icon: 'success',
                        title: 'Removed',
                        text: 'Product removed from wishlist',
                        showConfirmButton: false,
                        timer: 1500,
                        customClass: {
                            popup: 'animate__animated animate__fadeIn'
                        }
                    });
                } catch (error) {
                    console.error('Error:', error);
                    button.classList.remove('opacity-50');
                    button.querySelector('span').textContent = 'In Wishlist';
                    
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to remove from wishlist. Please try again.',
                    });
                }
            }
        });
    </script>

    <%- include("../partials/user/footer") %>
</body>
</html>