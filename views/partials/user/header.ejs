<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="description" content="Male_Fashion Template">
    <meta name="keywords" content="Male_Fashion, unica, creative, html">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Gerad-Fashion</title>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/ScrollTrigger.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

    <style>
       
       header {
            position: static;  /* Changed from fixed to sticky */
            top: 0;
            left: 0;
            right: 0;
            background: white;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .animate-fadeIn {
            animation: fadeIn 0.3s ease-out;
        }

        .dropdown-content {
            transform: translateY(-10px);
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease-in-out;
        }

        .dropdown-content.active {
            transform: translateY(0);
            opacity: 1;
            visibility: visible;
        }

        .nav-link {
            position: relative;
            padding-bottom: 2px;
        }

        .nav-link::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 50%;
            width: 0;
            height: 2px;
            background-color: #f97316;
            transition: all 0.3s ease;
            transform: translateX(-50%);
        }

        .nav-link:hover::after {
            width: 100%;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .cart-badge {
            animation: pulse 2s infinite;
        }

        .logo-text {
    background: linear-gradient(135deg, #f97316, #ea580c);
    background-clip: text; /* Add this line for non-webkit browsers */
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    transition: all 0.3s ease;
    font-size: 2em; /* Ensure the text is large enough */
    display: inline-block; /* Ensure the element can take up the width of the text */
}

        .logo-text:hover {
            transform: scale(1.05);
        }
    </style>
</head>

<body class="bg-gray-50">
    <div class="h-[72px] lg:h-[84px] hidden"><!-- Spacer div --></div>
    <header class="bg-white shadow-lg w-full transition-all duration-300" id="header">
        <div class="container mx-auto px-6 py-4">
            <div class="flex items-center justify-between">
                <!-- Logo Section -->
                <div class="header__logo">
                    <a href="/" class="text-3xl font-extrabold logo-text">
                        Gerad-Fashion
                    </a>
                </div>
    
                <!-- Navigation Menu -->
                <nav class="header__menu hidden lg:flex space-x-8">
                    <ul class="flex items-center space-x-8 text-lg font-medium text-gray-800">
                        <li><a href="/" class="nav-link hover:text-orange-500 transition-all duration-300">Home</a></li>
                        <li><a href="/products" class="nav-link hover:text-orange-500 transition-all duration-300">Products</a></li>
                        <li><a href="./contact.ejs" class="nav-link hover:text-orange-500 transition-all duration-300">Contacts</a></li>
                        <li><a href="#" class="nav-link hover:text-orange-500 transition-all duration-300">About Us</a></li>
                    </ul>
                </nav>

                <!-- Search Input -->
                <div class="relative hidden md:block">
                    <input type="text" id="search-input" 
                           placeholder="Search products..." 
                           class="w-64 pl-10 pr-4 py-2 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-300">
                    <button id="search-button" class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-orange-500">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </button>
                </div>
                <!-- User Options and Icons -->
                <div class="header__nav__option flex items-center space-x-6 ">
                    <% if (typeof user !== 'undefined' && user !== null) { %> 
                        <div class="relative">
                            <button id="user-menu-button" 
                                    class="text-lg font-semibold text-gray-800 hover:text-orange-500 transition-all duration-300 flex items-center">
                                <%= user.name %>
                                <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                            </button>
                            <ul id="user-dropdown" class="dropdown-content absolute right-0 mt-2  bg-white shadow-xl rounded-lg py-2 w-48 z-50" >
                                <li><a href="/profile" class="block px-4 py-2 text-gray-800 hover:bg-orange-500 hover:text-white transition-all duration-300 z-50">Profile</a></li>
                                <li><a href="/logout" class="block px-4 py-2 text-gray-800 hover:bg-orange-500 hover:text-white transition-all duration-300 z-50">Logout</a></li>
                            </ul>
                        </div>
                    <% } else { %>
                        <a href="/signup" class="text-lg font-semibold text-gray-800 hover:text-orange-500 transition-all duration-300">Sign Up</a>
                        <a href="/login" class="text-lg font-semibold text-gray-800 hover:text-orange-500 transition-all duration-300">Log in</a>
                    <% } %>

                    <button class="transition-transform duration-300 hover:scale-110 lg:hidden" id="mobile-menu-button">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
                        </svg>
                    </button>
                   
                    <a href="/wishlist" class="transition-transform duration-300 hover:scale-110">
                        <img src="img/icon/heart.png" alt="Favorites" class="w-5">
                    </a>
                    <button id="cart-button" class="transition-transform duration-300 hover:scale-110 relative" onclick="fetchCart()">
                        <img src="img/icon/cart.png" alt="Cart" class="w-5">
                        <span class="cart-badge absolute -top-2 -right-2 bg-orange-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold">0</span>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="fixed inset-0 bg-gray-800 bg-opacity-75 z-[1001] hidden">
        <div class="flex flex-col h-full bg-white w-64 ml-auto">
            <div class="p-4 flex justify-between items-center border-b">
                <h2 class="text-2xl font-bold text-gray-800">Menu</h2>
                <button id="close-mobile-menu" class="text-gray-600 hover:text-gray-800">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <nav class="flex-grow">
                <ul class="p-4 space-y-4">
                    <li><a href="/" class="block text-lg font-semibold text-gray-800 hover:text-orange-500 transition-all duration-300">Home</a></li>
                    <li><a href="/products" class="block text-lg font-semibold text-gray-800 hover:text-orange-500 transition-all duration-300">Products</a></li>
                    <li><a href="./contact.ejs" class="block text-lg font-semibold text-gray-800 hover:text-orange-500 transition-all duration-300">Contacts</a></li>
                    <li><a href="#" class="block text-lg font-semibold text-gray-800 hover:text-orange-500 transition-all duration-300">About Us</a></li>
                </ul>
            </nav>
        </div>
    </div>

    <script>
        // User dropdown toggle
        const userMenuButton = document.getElementById('user-menu-button');
        const userDropdown = document.getElementById('user-dropdown');
        let isDropdownOpen = false;

        if (userMenuButton && userDropdown) {
            userMenuButton.addEventListener('click', (e) => {
                e.stopPropagation();
                isDropdownOpen = !isDropdownOpen;
                userDropdown.classList.toggle('active', isDropdownOpen);
            });

            // Close dropdown when clicking outside
            document.addEventListener('click', (e) => {
                if (isDropdownOpen && !userDropdown.contains(e.target) && !userMenuButton.contains(e.target)) {
                    isDropdownOpen = false;
                    userDropdown.classList.remove('active');
                }
            });
        }

        // Cart fetch function
        async function fetchCart() {
            try {
                const response = await fetch('/cart', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

                if (response.ok) {
                    window.location.href = '/cart';
                } else if (response.status === 401) {
                    window.location.href = '/login';
                } else {
                    console.error('Failed to fetch cart:', response.status);
                }
            } catch (error) {
                console.error('Error:', error);
            }
        }

        // Header scroll effect with smooth transition
        let lastScroll = 0;
        const header = document.getElementById('header');
       

        window.addEventListener('scroll', () => {
            const currentScroll = window.pageYOffset;
            
            // Show/hide header based on scroll direction
            if (currentScroll > lastScroll && currentScroll > 200) {
                // Scrolling down & past banner
                header.style.transform = 'translateY(-100%)';
                spacer.classList.add('hidden');
            } else {
                // Scrolling up or at top
                header.style.transform = 'translateY(0)';
                spacer.classList.add('hidden');
            }

            // Add shadow and padding changes
            if (currentScroll > 50) {
                header.classList.add('py-2', 'shadow-md');
                header.classList.remove('py-4');
            } else {
                header.classList.add('py-4');
                header.classList.remove('py-2', 'shadow-md');
            }

            lastScroll = currentScroll;
        });
        // Mobile menu toggle with enhanced animation
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const closeMobileMenuButton = document.getElementById('close-mobile-menu');
        const mobileMenu = document.getElementById('mobile-menu');

        mobileMenuButton.addEventListener('click', () => {
            mobileMenu.classList.remove('hidden');
            gsap.from(mobileMenu.querySelector('div'), {
                x: '100%',
                duration: 0.3,
                ease: 'power2.out'
            });
        });

        closeMobileMenuButton.addEventListener('click', () => {
            gsap.to(mobileMenu.querySelector('div'), {
                x: '100%',
                duration: 0.3,
                ease: 'power2.in',
                onComplete: () => mobileMenu.classList.add('hidden')
            });
        });

        // Animate header elements on page load
        document.addEventListener('DOMContentLoaded', () => {
            gsap.from('.header__logo, .header__menu, .header__nav__option', {
                opacity: 0,
                y: -20,
                duration: 0.5,
                stagger: 0.1,
                ease: 'power2.out'
            });
        });

        //search main 
    //     function handleSearch() {
    //     const searchValue = document.getElementById('search-input').value.trim();
       
    //     if (searchValue) {
    //         // Redirect with search query as URL parameter
    //         window.location.href = `/products?search=${encodeURIComponent(searchValue)}`;
    //     }
    // }

    // // Event listener for button click
    // document.getElementById('search-button').addEventListener('click', handleSearch);

    // // Event listener for pressing "Enter" in the search input
    // document.getElementById('search-input').addEventListener('keypress', function(event) {
    //     if (event.key === 'Enter') {
    //         event.preventDefault();  // Prevent form submission if within a form element
    //         handleSearch();
    //     }
    // });
        





    class ProductSearch {
    constructor() {
        this.searchInput = document.getElementById('search-input');
        this.searchButton = document.getElementById('search-button');
        this.searchResults = document.createElement('div');
        this.searchResults.className = 'absolute w-full bg-white mt-1 rounded-lg shadow-lg z-50 hidden';
        this.searchInput.parentNode.appendChild(this.searchResults);
        
        this.setupEventListeners();
    }

    setupEventListeners() {
        // Debounced search as user types
        this.searchInput.addEventListener('input', this.debounce(() => {
            this.handleSearch();
        }, 300));

        // Handle enter key
        this.searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.performSearch();
            }
        });

        // Handle search button click
        this.searchButton.addEventListener('click', () => {
            this.performSearch();
        });

        // Close search results when clicking outside
        document.addEventListener('click', (e) => {
            if (!this.searchInput.contains(e.target) && !this.searchResults.contains(e.target)) {
                this.searchResults.classList.add('hidden');
            }
        });
    }

    async handleSearch() {
        const query = this.searchInput.value.trim();
        
        if (query.length < 2) {
            this.searchResults.classList.add('hidden');
            return;
        }

        try {
            const response = await fetch(`/products/suggestions?query=${encodeURIComponent(query)}`);
            if (!response.ok) throw new Error('Failed to get suggestions');
            
            const suggestions = await response.json();
            this.displaySuggestions(suggestions);
        } catch (error) {
            console.error('Search error:', error);
        }
    }

    displaySuggestions(suggestions) {
        const query = this.searchInput.value.trim();
        
        if (!query) {
            this.searchResults.classList.add('hidden');
            return;
        }

        this.searchResults.classList.remove('hidden');

        if (suggestions.length === 0) {
            this.searchResults.innerHTML = `
                <div class="p-4 text-center">
                    <div class="mb-2">
                        <svg class="w-16 h-16 mx-auto text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z">
                            </path>
                        </svg>
                    </div>
                    <div class="text-gray-600 font-medium mb-1">No products found</div>
                    <div class="text-gray-500 text-sm">
                        No results found for "${query}".<br>
                        Try checking your spelling or using different keywords.
                    </div>
                </div>`;
            return;
        }

        this.searchResults.innerHTML = suggestions.map(item => `
            <div class="p-2 hover:bg-gray-100 cursor-pointer flex items-center gap-3" 
                 onclick="window.location.href='/products/${item._id}'">
                <img src="${item.productImage}" 
                     alt="${item.productName}" 
                     class="w-12 h-12 object-cover rounded">
                <div>
                    <div class="font-medium">
                        ${this.highlightMatch(item.productName, this.searchInput.value)}
                    </div>
                    <div class="text-sm text-gray-600">
                        ${item.brand} | ${item.category.name}
                    </div>
                    <div class="text-sm font-semibold text-orange-500">
                        ₹${item.salePrice}
                    </div>
                </div>
            </div>
        `).join('');
    }

    async performSearch() {
        const query = this.searchInput.value.trim();
        
        if (!query) return;

        // Show loading state
        this.searchButton.innerHTML = `
            <svg class="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>`;

        try {
            const response = await fetch(`/products/search?search=${encodeURIComponent(query)}`);
            if (!response.ok) throw new Error('Search failed');

            window.location.href = `/products?search=${encodeURIComponent(query)}`;
        } catch (error) {
            console.error('Search error:', error);
            // Show error notification
            Swal.fire({
                icon: 'error',
                title: 'Search Failed',
                text: 'Please try again later',
                timer: 2000
            });
        } finally {
            // Restore search button
            this.searchButton.innerHTML = `
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>`;
        }
    }

    highlightMatch(text, query) {
        const regex = new RegExp(`(${query})`, 'gi');
        return text.replace(regex, '<mark class="bg-yellow-200">$1</mark>');
    }

    debounce(func, wait) {
        let timeout;
        return (...args) => {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }
}

// Initialize search when document is ready
document.addEventListener('DOMContentLoaded', () => {
    new ProductSearch();
});


    </script>
</body>
</html>